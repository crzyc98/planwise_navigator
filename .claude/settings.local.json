{
  "permissions": {
    "allow": [
      "mcp__gemini-cli__ask-gemini",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(source:*)",
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(rm:*)",
      "Bash(git push:*)",
      "Bash(gh secret:*)",
      "Bash(gh auth:*)",
      "Bash(gh issue create:*)",
      "Bash(gh run list:*)",
      "Bash(git commit:*)",
      "Bash(gh issue comment:*)",
      "Bash(chmod:*)",
      "Bash(dbt build:*)",
      "Bash(git merge:*)",
      "Bash(git stash:*)",
      "Bash(git reset:*)",
      "Bash(git branch:*)",
      "Bash(git fetch:*)",
      "Bash(git pull:*)",
      "Bash(dbt run:*)",
      "Bash(dagster asset materialize:*)",
      "Bash(dbt compile:*)",
      "Bash(./venv/bin/dbt --version)",
      "Bash(echo $PATH)",
      "Bash(../venv/bin/dbt run --select int_baseline_workforce)",
      "Bash(../venv/bin/dbt run --select stg_config_job_levels)",
      "Bash(../venv/bin/dbt seed --select config_job_levels)",
      "Bash(PYTHONPATH=/Users/nicholasamaral/planwise_navigator python3 -c \"\nimport duckdb\nfrom orchestrator_mvp.core.workforce_calculations import calculate_workforce_requirements_from_config\nimport yaml\n\n# Connect to the database and check the baseline workforce\nconn = duckdb.connect(''simulation.duckdb'')\nresult = conn.execute(''SELECT COUNT(*) FROM int_baseline_workforce WHERE employment_status = \"\"active\"\"'').fetchone()\nactive_count = result[0]\n\nprint(''🎉 SUCCESS: MVP PIPELINE WORKING! 🎉'')\nprint(''='' * 50)\nprint(f''✅ int_baseline_workforce created: {active_count:,} active employees'')\n\n# Load config and calculate requirements\nwith open(''config/test_config.yaml'', ''r'') as f:\n    config = yaml.safe_load(f)\n\nworkforce_config = config[''workforce'']\nworkforce_config[''target_growth_rate''] = config[''ops''][''run_multi_year_simulation''][''config''][''target_growth_rate'']\n\ncalc_result = calculate_workforce_requirements_from_config(active_count, workforce_config)\n\nprint()\nprint(''📊 NEXT YEAR SIMULATION REQUIREMENTS:'')\nprint(f''   • Starting workforce: {calc_result[\"\"current_workforce\"\"]:,}'')\nprint(f''   • Terminations needed: {calc_result[\"\"experienced_terminations\"\"]:,}'')\nprint(f''   • Gross hires needed: {calc_result[\"\"total_hires_needed\"\"]:,}'')\nprint(f''   • Expected new hire terminations: {calc_result[\"\"expected_new_hire_terminations\"\"]:,}'')\nprint(f''   • Net growth: +{calc_result[\"\"net_hiring_impact\"\"]:,}'')\nprint()\nprint(''✅ Workforce calculation function working with real baseline data!'')\nconn.close()\n\")",
      "Bash(PYTHONPATH=/Users/nicholasamaral/planwise_navigator python3 -c \"\nimport duckdb\n\n# Connect to the database and check what tables exist\nconn = duckdb.connect(''simulation.duckdb'')\ntables = conn.execute(''SHOW TABLES'').fetchall()\nprint(''Available tables:'')\nfor table in tables:\n    print(f''  - {table[0]}'')\n\n# Try with schema prefix\ntry:\n    result = conn.execute(''SELECT COUNT(*) FROM main.int_baseline_workforce WHERE employment_status = \"\"active\"\"'').fetchone()\n    active_count = result[0]\n    print(f''✅ Found int_baseline_workforce: {active_count:,} active employees'')\nexcept Exception as e:\n    print(f''❌ Error: {e}'')\n\nconn.close()\n\")",
      "Bash(PYTHONPATH=/Users/nicholasamaral/planwise_navigator python3 -c \"\nfrom orchestrator_mvp.core.database_manager import get_connection, list_tables\nfrom orchestrator_mvp.core.workforce_calculations import calculate_workforce_requirements_from_config\nimport yaml\n\n# Check what tables exist using the MVP orchestrator''s database manager\ntables = list_tables()\nprint(''✅ TABLES IN MVP DATABASE:'')\nfor table in tables:\n    print(f''  - {table}'')\n\n# Check for int_baseline_workforce specifically\nif ''int_baseline_workforce'' in tables:\n    conn = get_connection()\n    try:\n        result = conn.execute(''SELECT COUNT(*) FROM int_baseline_workforce WHERE employment_status = \"\"active\"\"'').fetchone()\n        active_count = result[0]\n        print(f''\\n🎉 SUCCESS: int_baseline_workforce has {active_count:,} active employees'')\n        \n        # Load config and calculate workforce requirements\n        with open(''config/test_config.yaml'', ''r'') as f:\n            config = yaml.safe_load(f)\n        \n        workforce_config = config[''workforce'']\n        workforce_config[''target_growth_rate''] = config[''ops''][''run_multi_year_simulation''][''config''][''target_growth_rate'']\n        \n        calc_result = calculate_workforce_requirements_from_config(active_count, workforce_config)\n        \n        print(''\\n📊 NEXT YEAR SIMULATION REQUIREMENTS:'')\n        print(f''   • Starting workforce: {calc_result[\"\"current_workforce\"\"]:,}'')\n        print(f''   • Terminations needed: {calc_result[\"\"experienced_terminations\"\"]:,}'')\n        print(f''   • Gross hires needed: {calc_result[\"\"total_hires_needed\"\"]:,}'')\n        print(f''   • Expected new hire terminations: {calc_result[\"\"expected_new_hire_terminations\"\"]:,}'')\n        print(f''   • Net growth: +{calc_result[\"\"net_hiring_impact\"\"]:,}'')\n        print(''\\n✅ MVP WORKFORCE CALCULATION WORKING WITH REAL DATA!'')\n        \n    finally:\n        conn.close()\nelse:\n    print(''\\n❌ int_baseline_workforce table not found'')\n\")",
      "Bash(PYTHONPATH:*)",
      "Bash(echo:*)",
      "Bash(for f in *.csv)",
      "Bash(do echo \"==> $f <==\")",
      "Bash(head:*)",
      "Bash(done)",
      "Bash(dbt test:*)"
    ],
    "deny": []
  }
}
