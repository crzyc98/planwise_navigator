{
  "permissions": {
    "allow": [
      "Bash(dbt seed:*)",
      "Bash(dbt run:*)",
      "Bash(dbt test:*)",
      "Bash(dbt parse:*)",
      "Bash(rm:*)",
      "Bash(dbt clean:*)",
      "Bash(dbt deps:*)",
      "Bash(dbt compile:*)",
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(grep:*)",
      "Bash(dbt show:*)",
      "Bash(sed:*)",
      "Bash(python -m dbt run:*)",
      "Bash(ls:*)",
      "Bash(python3 -c:*)",
      "Bash(source:*)",
      "Bash(dbt build:*)",
      "Bash(cat:*)",
      "Bash(python:*)",
      "Bash(cp:*)",
      "Bash(dagster asset materialize:*)",
      "Bash(dagster asset:*)",
      "Bash(dagster job execute:*)",
      "Bash(dbt list:*)",
      "Bash(sqlite3:*)",
      "Bash(duckdb:*)",
      "Bash(rg:*)",
      "Bash(. venv/bin/activate)",
      "Bash(venv/bin/dagster asset materialize --select simulation_year_state)",
      "Bash(./venv/bin/dagster asset materialize --select simulation_year_state)",
      "Bash(venv/bin/dbt run --select \"int_termination_events int_hiring_events fct_yearly_events fct_workforce_snapshot\" --vars '{simulation_year: 2025}' --project-dir dbt)",
      "Bash(PYTHONPATH=. ./venv/bin/python3 -m dbt.cli.main run --select \"int_termination_events int_hiring_events fct_yearly_events fct_workforce_snapshot\" --vars '{simulation_year: 2025}' --project-dir dbt)",
      "Bash(dagster dev:*)",
      "Bash(/usr/bin/python3 -m dbt:*)",
      "Bash(pip3 install:*)",
      "Bash(/Users/nicholasamaral/Library/Python/3.9/bin/dbt run)",
      "Bash(/Users/nicholasamaral/Library/Python/3.9/bin/dbt run --select fct_workforce_snapshot)",
      "Bash(/Users/nicholasamaral/Library/Python/3.9/bin/dbt run --select fct_compensation_growth)",
      "Bash(/Users/nicholasamaral/Library/Python/3.9/bin/dbt run --select fct_compensation_growth --vars '{simulation_year: 2026}')",
      "Bash(/Users/nicholasamaral/Library/Python/3.9/bin/dbt run --select fct_policy_optimization --vars '{simulation_year: 2026, test_scenario: \"scenario_001\"}')",
      "Bash(./scripts/lint:*)",
      "Bash(dbt snapshot:*)",
      "Bash(dagster job:*)",
      "Bash(python3 -c \"\nprint('üîç ANALYZING VARIANCE SOURCES')\nprint('')\nprint('Variance pattern: +86 to +103 employees above target')\nprint('Variance percentage: ~2% over target')\nprint('')\nprint('Potential sources:')\nprint('1. New hire terminations (probabilistic)')\nprint('2. Hiring calculation rounding')\nprint('3. Promotion effects not accounted in growth formula')\nprint('4. Merit increase timing effects')\nprint('')\nprint('Next: Check each component for variance...')\n\")",
      "Bash(dbt ls:*)",
      "Bash(ruff check:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(chmod:*)",
      "Bash(touch:*)",
      "Bash(pre-commit install:*)",
      "Bash(./scripts/run_ci_tests.sh:*)",
      "Bash(kill:*)",
      "Bash(echo:*)",
      "Bash(git restore:*)",
      "Bash(git checkout:*)",
      "Bash(git stash:*)",
      "Bash(for year in 2026 2027 2028 2029)",
      "Bash(do)",
      "Bash(done)",
      "Bash(make:*)",
      "Bash(pkill:*)",
      "Bash(DAGSTER_HOME=/Users/nicholasamaral/dagster_home_planwise dagster asset materialize -m definitions int_hiring_events)",
      "Bash(git merge:*)",
      "Bash(git push:*)",
      "Bash(git branch:*)",
      "Bash(time dbt run:*)",
      "Bash(awk:*)",
      "mcp__ide__executeCode",
      "Bash(dagster definitions list:*)",
      "Bash(dbt debug:*)",
      "Bash(dbt:*)",
      "Bash(curl:*)",
      "Bash(git pull:*)",
      "Bash(pip install:*)",
      "Bash(streamlit run:*)",
      "Bash(DAGSTER_HOME:*)",
      "Bash(gh pr create:*)",
      "Bash(git remote get-url:*)",
      "Bash(gh auth:*)",
      "Bash(timeout 10s streamlit run:*)",
      "Bash(/dev/null)",
      "Bash(dagster run list:*)",
      "Bash(dagster run status:*)",
      "Bash(pip show:*)",
      "Bash(venv/bin/dagster asset materialize --select advanced_optimization_engine -f definitions.py)",
      "Bash(venv/bin/dagster asset list -f definitions.py)",
      "Bash(venv/bin/dagster asset materialize --select single_year_simulation -f definitions.py)",
      "Bash(venv/bin/dagster asset materialize --select \"simulation_year_state,single_year_simulation\" -f definitions.py)",
      "Bash(venv/bin/dagster asset materialize --select \"simulation_config\" -f definitions.py)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dagster job list -m definitions)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/python -c \"\nimport duckdb\nconn = duckdb.connect(''simulation.duckdb'')\ntables = conn.execute(''SELECT table_name FROM information_schema.tables WHERE table_schema = \"\"main\"\"'').fetchall()\nprint(''Tables in database:'')\nfor table in tables:\n    print(f''  - {table[0]}'')\n    \n# Check specifically for workforce tables\ntry:\n    count = conn.execute(''SELECT COUNT(*) FROM fct_workforce_snapshot'').fetchone()[0]\n    print(f''fct_workforce_snapshot: {count} rows'')\nexcept Exception as e:\n    print(f''fct_workforce_snapshot: NOT FOUND ({e})'')\n    \ntry:\n    count = conn.execute(''SELECT COUNT(*) FROM fct_yearly_events'').fetchone()[0]\n    print(f''fct_yearly_events: {count} rows'')\nexcept Exception as e:\n    print(f''fct_yearly_events: NOT FOUND ({e})'')\n\nconn.close()\n\")",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/python -c \"\nimport duckdb\nconn = duckdb.connect(''simulation.duckdb'')\ntables = conn.execute(''SELECT table_name FROM information_schema.tables'').fetchall()\nprint(''Tables in database:'')\nfor table in tables:\n    print(f''  - {table[0]}'')\n    \nprint(f''Total tables: {len(tables)}'')\n\n# Check specifically for workforce tables\ntry:\n    count = conn.execute(''SELECT COUNT(*) FROM fct_workforce_snapshot'').fetchone()[0]\n    years = conn.execute(''SELECT DISTINCT simulation_year FROM fct_workforce_snapshot ORDER BY simulation_year'').fetchall()\n    print(f''fct_workforce_snapshot: {count} rows, years: {[y[0] for y in years]}'')\nexcept Exception as e:\n    print(f''fct_workforce_snapshot: NOT FOUND ({e})'')\n    \ntry:\n    count = conn.execute(''SELECT COUNT(*) FROM fct_yearly_events'').fetchone()[0]\n    years = conn.execute(''SELECT DISTINCT simulation_year FROM fct_yearly_events ORDER BY simulation_year'').fetchall()\n    print(f''fct_yearly_events: {count} rows, years: {[y[0] for y in years]}'')\nexcept Exception as e:\n    print(f''fct_yearly_events: NOT FOUND ({e})'')\n\nconn.close()\n\")",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/python:*)",
      "Bash(git reset:*)",
      "Bash(timeout:*)",
      "Bash(pip check)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt parse)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt ls --select tag:critical)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt ls --select tag:foundation)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt ls --select tag:locked)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt ls --select tag:event_sourcing)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt ls --select tag:critical,tag:foundation)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt ls --select tag:critical --resource-type model)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt test --select tag:critical --dry-run)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt docs generate)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt clean)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt deps)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt ls --select tag:critical,tag:foundation,tag:locked,tag:event_sourcing --resource-type model)",
      "Bash(/Users/nicholasamaral/planwise_navigator/venv/bin/dbt ls --select \"tag:critical or tag:foundation or tag:locked or tag:event_sourcing\" --resource-type model)",
      "Bash(CI_MODE=fast ./scripts/run_ci_tests.sh)",
      "Bash(CI_MODE=fast timeout 60 ./scripts/run_ci_tests.sh)",
      "Bash(CI_MODE=contract-only ./scripts/run_ci_tests.sh)",
      "Bash(gh pr list:*)",
      "Bash(duckling:*)"
    ],
    "deny": []
  }
}
