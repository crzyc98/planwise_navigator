{{ config(
    materialized='view',
    tags=['debug', 'polars_events', 'e068g'],
    enabled=false
) }}

-- Debug model to test Polars events source configuration
-- Epic E068G: Polars Bulk Event Factory Integration
--
-- This model demonstrates how to query events generated by the Polars bulk factory.
-- It can be used for validating that the external source configuration is working correctly.
--
-- Usage:
--   1. Generate events using Polars factory:
--      POLARS_MAX_THREADS=16 python navigator_orchestrator/polars_event_factory.py --start 2025 --end 2026 --out data/parquet/polars_events
--   2. Enable this model by setting enabled=true above
--   3. Run: dbt run --select debug_polars_events --vars "polars_events_path: data/parquet/polars_events"

WITH polars_event_summary AS (
  SELECT
    scenario_id,
    plan_design_id,
    simulation_year,
    event_type,
    COUNT(*) as event_count,
    COUNT(DISTINCT employee_id) as unique_employees,
    MIN(effective_date) as earliest_event_date,
    MAX(effective_date) as latest_event_date,
    AVG(CASE
      WHEN compensation_amount IS NOT NULL THEN compensation_amount
      ELSE NULL
    END) as avg_compensation_amount,
    SUM(CASE
      WHEN event_type = 'hire' THEN 1
      ELSE 0
    END) as hire_events,
    SUM(CASE
      WHEN event_type = 'termination' THEN 1
      ELSE 0
    END) as termination_events,
    SUM(CASE
      WHEN event_type = 'promotion' THEN 1
      ELSE 0
    END) as promotion_events,
    SUM(CASE
      WHEN event_type = 'raise' THEN 1
      ELSE 0
    END) as merit_events,
    SUM(CASE
      WHEN event_type IN ('enrollment', 'enrollment_change') THEN 1
      ELSE 0
    END) as enrollment_events
  FROM {{ source('polars_events', 'fct_yearly_events_polars') }}
  WHERE data_quality_flag = 'VALID'
  GROUP BY
    scenario_id,
    plan_design_id,
    simulation_year,
    event_type
),

quality_check AS (
  SELECT
    'polars_events_quality_check' as check_type,
    scenario_id,
    simulation_year,
    SUM(event_count) as total_events,
    SUM(hire_events) as total_hires,
    SUM(termination_events) as total_terminations,
    SUM(promotion_events) as total_promotions,
    SUM(merit_events) as total_merit_increases,
    SUM(enrollment_events) as total_enrollment_events,
    -- Basic data quality checks
    CASE
      WHEN SUM(event_count) = 0 THEN 'NO_EVENTS'
      WHEN SUM(hire_events) = 0 AND SUM(termination_events) = 0 THEN 'NO_WORKFORCE_EVENTS'
      WHEN SUM(unique_employees) = 0 THEN 'NO_EMPLOYEES'
      ELSE 'VALID'
    END as quality_status
  FROM polars_event_summary
  GROUP BY scenario_id, simulation_year
)

SELECT
  check_type,
  scenario_id,
  simulation_year,
  total_events,
  total_hires,
  total_terminations,
  total_promotions,
  total_merit_increases,
  total_enrollment_events,
  quality_status,
  -- Performance metrics
  ROUND(total_events / GREATEST(1, EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - CURRENT_TIMESTAMP))), 2) as events_per_second_theoretical,
  -- Event distribution
  ROUND(100.0 * total_hires / GREATEST(1, total_events), 2) as hire_percentage,
  ROUND(100.0 * total_terminations / GREATEST(1, total_events), 2) as termination_percentage,
  ROUND(100.0 * total_promotions / GREATEST(1, total_events), 2) as promotion_percentage,
  ROUND(100.0 * total_merit_increases / GREATEST(1, total_events), 2) as merit_percentage,
  ROUND(100.0 * total_enrollment_events / GREATEST(1, total_events), 2) as enrollment_percentage,
  CURRENT_TIMESTAMP as analysis_timestamp
FROM quality_check
ORDER BY scenario_id, simulation_year
