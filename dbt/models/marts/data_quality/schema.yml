version: 2

models:
  - name: dq_employee_id_validation
    description: >
      Data quality validation model for employee ID integrity.
      Checks for duplicates, format violations, and SSN conflicts across all workforce data.
    columns:
      - name: check_type
        description: Type of data quality check performed
        data_tests:
          - not_null
          - accepted_values:
              values: ['DUPLICATE_IDS', 'INVALID_FORMAT', 'LEGACY_FORMAT', 'SSN_SHARED']
      - name: severity
        description: Severity level of the issue (ERROR, WARNING, INFO)
        data_tests:
          - not_null
          - accepted_values:
              values: ['ERROR', 'WARNING', 'INFO']
      - name: issue_count
        description: Number of records with this specific issue
        data_tests:
          - not_null
      - name: description
        description: Human-readable description of the issue
        data_tests:
          - not_null
      - name: details
        description: JSON array containing detailed information about each issue

    data_tests:
      - dbt_utils.expression_is_true:
          expression: "issue_count = 0"
          where: "severity = 'ERROR'"
          error_if: ">0"
          warn_if: "=0"
          meta:
            description: "Fail if any ERROR-level data quality issues are found"

  - name: dq_employee_contributions_validation
    description: >
      Data quality validation for employee contribution calculations in Epic E034.
      Validates contributions don't exceed compensation, checks rate consistency,
      validates IRS 402(g) limits, and ensures data integrity. Returns only failing
      records for review - empty result indicates all validations passed.
    config:
      tags: ["data_quality", "contributions", "epic_e034", "validation"]
    columns:
      - name: employee_id
        description: "Employee identifier with validation failure"
        data_tests:
          - not_null
      - name: simulation_year
        description: "Simulation year for the validation"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 2020
              max_value: 2050
      - name: validation_rule
        description: "Type of validation that failed"
        data_tests:
          - not_null
          - accepted_values:
              values:
                - 'contributions_exceed_compensation'
                - 'deferral_rate_inconsistency'
                - 'irs_402g_limit_exceeded'
                - 'contribution_components_mismatch'
                - 'negative_contribution_amount'
                - 'enrolled_without_contributions'
                - 'excessive_contribution_rate'
                - 'irs_limit_flag_inaccurate'
      - name: severity
        description: "Severity level of the validation failure"
        data_tests:
          - not_null
          - accepted_values:
              values: ['ERROR', 'WARNING', 'INFO']
      - name: validation_message
        description: "Human-readable description of the validation failure"
        data_tests:
          - not_null
      - name: actual_value
        description: "Actual value that caused the validation failure"
      - name: expected_max_value
        description: "Expected or maximum allowed value"
      - name: variance
        description: "Difference between actual and expected value"
      - name: severity_rank
        description: "Numeric ranking of severity (1=ERROR, 2=WARNING, 3=INFO)"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3]
      - name: validation_category
        description: "Category grouping of validation rules"
        data_tests:
          - not_null
          - accepted_values:
              values:
                - 'CONTRIBUTION_AMOUNTS'
                - 'RATE_VALIDATION'
                - 'IRS_COMPLIANCE'
                - 'DATA_INTEGRITY'
                - 'ENROLLMENT_CONSISTENCY'
                - 'OTHER'
      - name: validation_timestamp
        description: "When the validation was performed"
        data_tests:
          - not_null
      - name: validation_source
        description: "Source identifier for the validation"
        data_tests:
          - not_null

    data_tests:
      # Critical test: No ERROR-level contribution validation failures should exist
      - dbt_utils.expression_is_true:
          expression: "1=1"  # This model returns only failures, so any ERROR record is a problem
          where: "severity = 'ERROR'"
          error_if: ">0"
          warn_if: "=0"
          name: "no_critical_contribution_validation_failures"
          meta:
            description: "Fail if any ERROR-level contribution validation issues are found"
      # Warning test: Limit WARNING-level failures to reasonable threshold
      - dbt_utils.expression_is_true:
          expression: "1=1"
          where: "severity = 'WARNING'"
          warn_if: ">10"  # Warn if more than 10 WARNING-level issues
          name: "warning_contribution_validation_failures_threshold"
          meta:
            description: "Warn if excessive WARNING-level contribution validation issues are found"

  - name: dq_deferral_escalation_validation
    description: >
      Comprehensive data quality validation for Epic E035 automatic deferral rate escalation system.
      Provides real-time monitoring with automated health scoring (0-100 scale) covering business
      rule enforcement, integration consistency, event sequencing, parameter validation, and
      multi-year progression tracking. Critical for ensuring production readiness and compliance.
    config:
      tags: ["data_quality", "escalation", "monitoring", "epic_e035"]
    columns:
      - name: simulation_year
        description: Simulation year being validated
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 2025
              max_value: 2050
      - name: health_score
        description: Overall system health score (0-100, where 100 = perfect)
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100
      - name: health_status
        description: Categorical health status based on health score
        data_tests:
          - not_null
          - accepted_values:
              values: ['PERFECT', 'EXCELLENT', 'GOOD', 'FAIR', 'POOR', 'CRITICAL']
      - name: total_violations
        description: Total number of data quality violations detected
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100000
      - name: total_records
        description: Total number of records examined across all validations
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1000000
      - name: violation_rate_pct
        description: Percentage of records with violations
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100
      - name: invalid_deferral_rates
        description: Count of invalid deferral rates (outside 0-100% range)
        data_tests:
          - not_null
      - name: duplicate_escalations
        description: Count of duplicate escalation events (should be 0)
        data_tests:
          - not_null
      - name: incorrect_effective_dates
        description: Count of escalations not on January 1st (violates user requirement)
        data_tests:
          - not_null
      - name: deferral_rate_mismatches
        description: Count of deferral rate inconsistencies between models
        data_tests:
          - not_null
      - name: escalation_count_decreases
        description: Count of employees with decreasing escalation counts year-over-year
        data_tests:
          - not_null
      - name: recommendations
        description: System-generated recommendations based on health score
        data_tests:
          - not_null
      - name: validation_timestamp
        description: Timestamp when validation was performed
        data_tests:
          - not_null

    data_tests:
      # Critical test: Health score must be above minimum threshold for production
      - dbt_utils.expression_is_true:
          expression: "health_score >= 85"
          error_if: ">0"
          name: "escalation_system_health_score_threshold"
          meta:
            description: "Ensure escalation system health score meets production standards"

      # Critical test: No duplicate escalation events allowed
      - dbt_utils.expression_is_true:
          expression: "duplicate_escalations = 0"
          error_if: ">0"
          name: "no_duplicate_escalation_events"
          meta:
            description: "Fail if duplicate escalation events are detected"

      # Critical test: All escalations must be on January 1st per user requirement
      - dbt_utils.expression_is_true:
          expression: "incorrect_effective_dates = 0"
          error_if: ">0"
          name: "escalations_on_january_first"
          meta:
            description: "Fail if escalation events are not on January 1st as required"

      # Critical test: No deferral rate mismatches between models
      - dbt_utils.expression_is_true:
          expression: "deferral_rate_mismatches = 0"
          error_if: ">0"
          warn_if: ">5"
          name: "no_deferral_rate_mismatches"
          meta:
            description: "Ensure deferral rates are consistent across all models"

      # Critical test: Escalation counts should never decrease year-over-year
      - dbt_utils.expression_is_true:
          expression: "escalation_count_decreases = 0"
          error_if: ">0"
          name: "no_escalation_count_decreases"
          meta:
            description: "Fail if escalation counts decrease between simulation years"

  - name: dq_e057_new_hire_termination_validation
    description: >
      **Epic E057: Comprehensive Data Quality Validation for New Hire Termination and Proration Fixes**

      Validates the comprehensive fixes implemented in Epic E057:
      1. Termination date generation fixes in int_new_hire_termination_events.sql
      2. Prorated compensation fixes in fct_workforce_snapshot.sql
      3. Regression testing for existing functionality

      **VALIDATION CATEGORIES:**
      - A. Termination Date Validation (future dates, dates before hire)
      - B. Prorated Compensation Validation (with 1-day tolerance)
      - C. New Hire Specific Validations
      - D. Regression Testing (existing functionality unchanged)

      Returns only failing records for review - empty result indicates all validations passed.
      Critical for ensuring Epic E057 fixes maintain data integrity and event-sourcing guarantees.
    config:
      tags: ["data_quality", "epic_e057", "new_hire_termination", "critical"]
    columns:
      - name: employee_id
        description: "Employee identifier with validation failure"
        data_tests:
          - not_null
      - name: simulation_year
        description: "Simulation year for the validation"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 2020
              max_value: 2050
      - name: validation_category
        description: "Category of validation performed"
        data_tests:
          - not_null
          - accepted_values:
              values:
                - 'termination_date_validation'
                - 'prorated_compensation_validation'
                - 'new_hire_specific_validation'
                - 'regression_testing'
      - name: validation_rule
        description: "Specific validation rule that failed"
        data_tests:
          - not_null
          - accepted_values:
              values:
                # Termination Date Validation Rules
                - 'future_termination'
                - 'termination_before_hire'
                - 'new_hire_termination_missing_date'
                - 'new_hire_termination_wrong_year'
                - 'new_hire_termination_invalid_sequence'
                # Prorated Compensation Validation Rules
                - 'prorated_compensation_mismatch'
                - 'prorated_exceeds_annual'
                - 'terminated_not_prorated'
                # New Hire Specific Validation Rules
                - 'new_hire_termination_status_mismatch'
                - 'terminated_new_hire_wrong_status'
                - 'new_hire_id_date_mismatch'
                # Regression Testing Rules
                - 'existing_employee_wrong_termination_status'
                - 'existing_employee_wrong_active_status'
                - 'active_employee_zero_compensation'
      - name: validation_message
        description: "Human-readable description of the validation failure"
        data_tests:
          - not_null
      - name: severity
        description: "Severity level of the validation failure"
        data_tests:
          - not_null
          - accepted_values:
              values: ['ERROR', 'WARNING', 'INFO']
      - name: actual_value
        description: "Actual value that caused the validation failure"
      - name: expected_value
        description: "Expected value for the validation"
      - name: severity_rank
        description: "Numeric ranking of severity (1=ERROR, 2=WARNING, 3=INFO)"
        data_tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3]
      - name: total_new_hires_examined
        description: "Total number of new hires examined in validation"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: total_new_hire_terminations_examined
        description: "Total number of new hire terminations examined"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: epic_number
        description: "Epic identifier for traceability"
        data_tests:
          - not_null
          - accepted_values:
              values: ['E057']
      - name: validation_timestamp
        description: "When the validation was performed"
        data_tests:
          - not_null
      - name: validation_source
        description: "Source identifier for the validation"
        data_tests:
          - not_null

    data_tests:
      # Critical test: No ERROR-level Epic E057 validation failures should exist
      - dbt_utils.expression_is_true:
          expression: "1=1"  # This model returns only failures, so any ERROR record is a problem
          where: "severity = 'ERROR'"
          error_if: ">0"
          warn_if: "=0"
          name: "no_critical_e057_validation_failures"
          meta:
            description: "Fail if any ERROR-level Epic E057 validation issues are found"
            epic: "E057"
            test_category: "comprehensive_validation"
      # Warning test: Limit WARNING-level failures to reasonable threshold
      - dbt_utils.expression_is_true:
          expression: "1=1"
          where: "severity = 'WARNING'"
          warn_if: ">5"  # Warn if more than 5 WARNING-level issues
          name: "warning_e057_validation_failures_threshold"
          meta:
            description: "Warn if excessive WARNING-level Epic E057 validation issues are found"
            epic: "E057"
            test_category: "comprehensive_validation"
      # Test that no future terminations exist (specific Epic E057 requirement)
      - dbt_utils.expression_is_true:
          expression: "validation_rule != 'future_termination'"
          error_if: ">0"
          name: "e057_no_future_terminations_in_validation"
          meta:
            description: "Epic E057: Critical validation that no future termination dates exist"
            epic: "E057"
            test_category: "termination_date_validation"
      # Test that no terminations before hires exist (specific Epic E057 requirement)
      - dbt_utils.expression_is_true:
          expression: "validation_rule != 'termination_before_hire'"
          error_if: ">0"
          name: "e057_no_terminations_before_hires_in_validation"
          meta:
            description: "Epic E057: Critical validation that no termination dates are before hire dates"
            epic: "E057"
            test_category: "termination_date_validation"

  - name: dq_new_hire_termination_match_validation
    description: >
      **Epic E061: New Hire Termination Employer Match Validation**

      Identifies and validates the fix for new hire terminations incorrectly receiving
      employer match contributions despite configuration that should exclude them.

      **The Problem (Epic E061):**
      - 126 out of 218 new hire terminations receiving incorrect match payments
      - Total $110,713 in incorrect match payments in 2025
      - Root cause: apply_eligibility=false bypassed configured eligibility rules

      **The Solution:**
      - Enable apply_eligibility=true in simulation_config.yaml
      - Configure eligibility rules to exclude new hire terminations:
        * require_active_at_year_end=true (excludes year-of-hire terminations)
        * allow_terminated_new_hires=false (explicit exclusion)

      Returns both detailed validation results and summary statistics.
      Empty FAIL results indicate the fix is working correctly.
      Critical for ensuring employer match compliance and cost accuracy.
    config:
      tags: ["data_quality", "epic_e061", "new_hire_termination", "employer_match", "critical"]
    columns:
      - name: record_type
        description: "Type of record: DETAIL or SUMMARY"
        data_tests:
          - not_null
          - accepted_values:
              values: ['DETAIL', 'SUMMARY']
      - name: employee_id
        description: "Employee identifier (NULL for SUMMARY records)"
      - name: simulation_year
        description: "Simulation year for the validation"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 2020
              max_value: 2050
      - name: employee_category
        description: "Category of employee: new_hire_termination, new_hire_active, continuing_employee"
        data_tests:
          - accepted_values:
              values: ['new_hire_termination', 'new_hire_active', 'continuing_employee']
      - name: new_hire_termination_match_validation
        description: "Validation result for new hire terminations receiving match"
        data_tests:
          - accepted_values:
              values: ['PASS', 'FAIL', 'EXPECTED_ISSUE', 'N/A']
      - name: configuration_validation
        description: "Validation of eligibility configuration settings"
        data_tests:
          - accepted_values:
              values: ['CORRECT_CONFIG', 'BACKWARD_COMPATIBILITY', 'INCORRECT_CONFIG', 'UNKNOWN_CONFIG']
      - name: eligibility_reason_validation
        description: "Validation of eligibility reason codes for new hire terminations"
        data_tests:
          - accepted_values:
              values: ['PASS', 'FAIL', 'BACKWARD_COMPATIBILITY', 'N/A']
      - name: eligible_employee_match_validation
        description: "Validation that eligible employees still receive proper match"
        data_tests:
          - accepted_values:
              values: ['PASS', 'FAIL', 'N/A']
      - name: incorrect_match_amount
        description: "Amount of incorrect match payments for new hire terminations"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100000
      - name: match_apply_eligibility
        description: "Whether eligibility enforcement is enabled"
      - name: match_allow_terminated_new_hires
        description: "Whether terminated new hires are allowed to receive match"
      - name: match_requires_active_eoy
        description: "Whether employees must be active at end of year for match"
      - name: total_new_hire_terminations
        description: "Total number of new hire terminations (SUMMARY only)"
      - name: new_hire_terminations_with_incorrect_match
        description: "Number of new hire terminations receiving incorrect match (SUMMARY only)"
      - name: total_incorrect_match_payments
        description: "Total dollar amount of incorrect match payments (SUMMARY only)"
      - name: overall_validation_status
        description: "Overall validation status (SUMMARY only)"
        data_tests:
          - accepted_values:
              values: ['ALL_PASS', 'NEW_HIRE_TERMINATION_ISSUES', 'ELIGIBLE_EMPLOYEE_ISSUES', 'MIXED_ISSUES']

    data_tests:
      # Epic E061: Critical test - No new hire terminations should receive match when eligibility is enforced
      - dbt_utils.expression_is_true:
          expression: "new_hire_termination_match_validation != 'FAIL'"
          where: "record_type = 'DETAIL' AND employee_category = 'new_hire_termination' AND match_apply_eligibility = true"
          error_if: ">0"
          name: "e061_no_new_hire_termination_match_when_enforced"
          meta:
            description: "Epic E061: Critical validation that new hire terminations receive no match when eligibility is enforced"
            epic: "E061"
            test_category: "new_hire_termination_match_validation"

      # Epic E061: Critical test - Eligible employees should still receive match
      - dbt_utils.expression_is_true:
          expression: "eligible_employee_match_validation != 'FAIL'"
          where: "record_type = 'DETAIL' AND eligible_employee_match_validation IS NOT NULL"
          error_if: ">0"
          warn_if: ">10"
          name: "e061_eligible_employees_receive_match"
          meta:
            description: "Epic E061: Ensure eligible employees still receive proper match after fix"
            epic: "E061"
            test_category: "eligible_employee_validation"

      # Epic E061: Configuration validation - Should have correct config when eligibility is enforced
      - dbt_utils.expression_is_true:
          expression: "configuration_validation = 'CORRECT_CONFIG'"
          where: "record_type = 'DETAIL' AND match_apply_eligibility = true"
          error_if: ">0"
          name: "e061_correct_eligibility_configuration"
          meta:
            description: "Epic E061: Ensure eligibility configuration is correct when enforcement is enabled"
            epic: "E061"
            test_category: "configuration_validation"

      # Epic E061: Financial impact validation - Total incorrect payments should be zero after fix
      - dbt_utils.expression_is_true:
          expression: "total_incorrect_match_payments = 0 OR total_incorrect_match_payments IS NULL"
          where: "record_type = 'SUMMARY' AND overall_validation_status = 'ALL_PASS'"
          error_if: ">0"
          name: "e061_zero_incorrect_match_payments_after_fix"
          meta:
            description: "Epic E061: Validate that incorrect match payments are eliminated after fix"
            epic: "E061"
            test_category: "financial_impact_validation"

      # Epic E061: Summary validation - Overall status should be ALL_PASS after fix
      - dbt_utils.expression_is_true:
          expression: "overall_validation_status = 'ALL_PASS'"
          where: "record_type = 'SUMMARY'"
          error_if: ">0"
          warn_if: "=0"
          name: "e061_overall_validation_passes"
          meta:
            description: "Epic E061: Ensure overall validation status is ALL_PASS after implementing fix"
            epic: "E061"
            test_category: "overall_validation"

  - name: dq_new_hire_core_proration_validation
    description: >
      **Story S065-02: New Hire Core Contribution Proration Validation**

      Validates the comprehensive fix for new hire core contribution proration implemented in Story S065-02.
      Ensures that new hire core contributions are properly calculated based on prorated compensation,
      not full annual compensation, maintaining the ~1% contribution rate accuracy.

      **The Problem (Story S065-02):**
      - New hires were receiving core contributions based on full annual compensation
      - Should receive contributions based on prorated compensation from hire date to year-end
      - Employees with <1000 hours should receive $0 core contributions
      - Core contribution rate should be approximately 1% of prorated compensation

      **The Solution:**
      - Fixed proration logic in int_employer_core_contributions.sql
      - Proper calculation: prorated_compensation * core_contribution_rate
      - Enforcement of <1000 hour rule for core contributions
      - Validation of rate consistency across the workforce

      **VALIDATION CATEGORIES:**
      - A. New Hire Proration Validation (rate ~1% of prorated, not annual compensation)
      - B. Low Hours Validation (<1000 hour employees receive $0 core)
      - C. Rate Consistency Validation (deviation <= 0.1% from expected rate)
      - D. Compensation Basis Validation (ensuring prorated vs annual usage)

      Returns both detailed validation results and summary statistics.
      Empty FAIL results indicate the fix is working correctly.
      Critical for ensuring core contribution accuracy and compliance.
    config:
      tags: ["data_quality", "epic_s065", "new_hire_core_proration", "critical"]
    columns:
      - name: record_type
        description: "Type of record: DETAIL or SUMMARY"
        data_tests:
          - not_null
          - accepted_values:
              values: ['DETAIL', 'SUMMARY']
      - name: employee_id
        description: "Employee identifier (NULL for SUMMARY records)"
      - name: simulation_year
        description: "Simulation year for the validation"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 2020
              max_value: 2050
      - name: employee_category
        description: "Category of employee: new_hire_active, new_hire_termination, continuing_employee"
        data_tests:
          - accepted_values:
              values: ['new_hire_active', 'new_hire_termination', 'continuing_employee']
      - name: hire_date
        description: "Employee hire date (for new hires only)"
      - name: termination_date
        description: "Employee termination date (if terminated in current year)"
      - name: annual_compensation
        description: "Full annual compensation amount (current_compensation from snapshot)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1000000
      - name: prorated_annual_compensation
        description: "Prorated compensation from hire date to year-end (or termination)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1000000
      - name: annual_hours_worked
        description: "Annual hours worked by the employee"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 3000
      - name: employment_status
        description: "Employment status (active or terminated)"
        data_tests:
          - accepted_values:
              values: ['active', 'terminated']
      - name: eligible_for_core
        description: "Whether employee is eligible for core contributions"
        data_tests:
          - accepted_values:
              values: [true, false]
      - name: final_core_amount
        description: "Final core contribution amount from workforce snapshot"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: expected_core_amount_prorated
        description: "Expected core amount based on prorated compensation"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: actual_core_rate
        description: "Actual core contribution rate (core_amount / prorated_compensation)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 0.1
      - name: core_amount_variance
        description: "Variance between expected and actual core amount"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: -1000
              max_value: 1000
      - name: new_hire_proration_validation
        description: "Validation result for new hire core proration"
        data_tests:
          - accepted_values:
              values: ['PASS', 'FAIL', 'N/A']
      - name: low_hours_validation
        description: "Validation that <1000 hour employees receive $0 core"
        data_tests:
          - accepted_values:
              values: ['PASS', 'FAIL', 'N/A']
      - name: rate_consistency_validation
        description: "Validation of core contribution rate consistency"
        data_tests:
          - accepted_values:
              values: ['PASS', 'FAIL', 'N/A']
      - name: compensation_basis_validation
        description: "Validation of whether prorated or annual compensation is being used"
        data_tests:
          - accepted_values:
              values: ['CORRECTLY_USING_PRORATED_COMPENSATION', 'LIKELY_USING_ANNUAL_COMPENSATION', 'N/A']
      - name: total_new_hires
        description: "Total number of new hires examined (SUMMARY only)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: new_hires_proration_failures
        description: "Number of new hires with proration validation failures (SUMMARY only)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: total_low_hours_employees
        description: "Total number of employees with <1000 hours (SUMMARY only)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: low_hours_validation_failures
        description: "Number of <1000 hour employees incorrectly receiving core (SUMMARY only)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: rate_consistency_failures
        description: "Number of employees with rate consistency failures (SUMMARY only)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: likely_using_annual_compensation
        description: "Number of new hires likely using annual vs prorated compensation (SUMMARY only)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: total_absolute_variance
        description: "Total absolute variance across all core calculations (SUMMARY only)"
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100000
      - name: overall_validation_status
        description: "Overall validation status (SUMMARY only)"
        data_tests:
          - accepted_values:
              values: ['ALL_PASS', 'NEW_HIRE_PRORATION_ISSUES', 'LOW_HOURS_VALIDATION_ISSUES', 'RATE_CONSISTENCY_ISSUES', 'MIXED_ISSUES']

    data_tests:
      # Story S065-02: Critical test - No new hire proration validation failures should exist
      - dbt_utils.expression_is_true:
          expression: "new_hire_proration_validation != 'FAIL'"
          where: "record_type = 'DETAIL' AND employee_category IN ('new_hire_active', 'new_hire_termination')"
          error_if: ">0"
          name: "s065_02_no_new_hire_proration_failures"
          meta:
            description: "Story S065-02: Critical validation that new hire core contributions use prorated compensation"
            story: "S065-02"
            test_category: "new_hire_proration_validation"

      # Story S065-02: Critical test - No low hours validation failures should exist
      - dbt_utils.expression_is_true:
          expression: "low_hours_validation != 'FAIL'"
          where: "record_type = 'DETAIL' AND annual_hours_worked < 1000"
          error_if: ">0"
          name: "s065_02_no_low_hours_validation_failures"
          meta:
            description: "Story S065-02: Critical validation that <1000 hour employees receive $0 core"
            story: "S065-02"
            test_category: "low_hours_validation"

      # Story S065-02: Critical test - Rate consistency failures should be minimal
      - dbt_utils.expression_is_true:
          expression: "rate_consistency_validation != 'FAIL'"
          where: "record_type = 'DETAIL' AND eligible_for_core = true AND annual_hours_worked >= 1000"
          error_if: ">10"  # Allow small number of edge cases
          warn_if: ">5"
          name: "s065_02_rate_consistency_threshold"
          meta:
            description: "Story S065-02: Ensure core contribution rate consistency within tolerance"
            story: "S065-02"
            test_category: "rate_consistency_validation"

      # Story S065-02: Critical test - New hires should use prorated compensation
      - dbt_utils.expression_is_true:
          expression: "compensation_basis_validation != 'LIKELY_USING_ANNUAL_COMPENSATION'"
          where: "record_type = 'DETAIL' AND employee_category IN ('new_hire_active', 'new_hire_termination') AND eligible_for_core = true"
          error_if: ">0"
          name: "s065_02_new_hires_use_prorated_compensation"
          meta:
            description: "Story S065-02: Ensure new hires use prorated compensation, not annual compensation"
            story: "S065-02"
            test_category: "compensation_basis_validation"

      # Story S065-02: Overall validation - System should pass all validations after fix
      - dbt_utils.expression_is_true:
          expression: "overall_validation_status = 'ALL_PASS'"
          where: "record_type = 'SUMMARY'"
          error_if: ">0"
          warn_if: "=0"
          name: "s065_02_overall_validation_passes"
          meta:
            description: "Story S065-02: Ensure overall validation status is ALL_PASS after implementing fix"
            story: "S065-02"
            test_category: "overall_validation"

      # Story S065-02: Financial impact validation - Total variance should be minimal
      - dbt_utils.expression_is_true:
          expression: "total_absolute_variance < 1000"  # Allow for minor rounding differences
          where: "record_type = 'SUMMARY'"
          error_if: ">0"
          warn_if: "=0"
          name: "s065_02_minimal_financial_variance"
          meta:
            description: "Story S065-02: Ensure financial variance from expected core amounts is minimal"
            story: "S065-02"
            test_category: "financial_impact_validation"
