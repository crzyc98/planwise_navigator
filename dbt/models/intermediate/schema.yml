version: 2

models:
  - name: int_employer_eligibility
    description: >
      MVP employer contribution eligibility determination model.
      Enhanced with Epic E058: Employer Match Eligibility Configuration.
      Implements sophisticated eligibility logic for both match and core contributions
      with configurable business rules and backward compatibility.
    config:
      tags: ["employer_contributions", "eligibility", "foundation", "e058"]
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
          # Epic E058 Phase 4: Disabled - eligibility includes new hires not in baseline workforce
          # - relationships:
          #     to: ref('int_baseline_workforce')
          #     field: employee_id
      - name: simulation_year
        description: Simulation year for eligibility determination
        data_tests:
          - not_null
          - accepted_values:
              values: [2025, 2026, 2027, 2028, 2029]
      - name: employment_status
        description: Current employment status
        data_tests:
          - not_null
          - accepted_values:
              values: ['active', 'terminated']
      - name: annual_hours_worked
        description: Annual hours worked (2080 for active, 0 for terminated)
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 3000
      - name: eligible_for_contributions
        description: Combined eligibility flag for employer contributions
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: eligible_for_match
        description: "Epic E058 Phase 1: Eligibility flag for employer match contributions with configurable rules"
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: match_eligibility_reason
        description: "Epic E058 Phase 1: Reason code for match eligibility determination"
        data_tests:
          - not_null
          - accepted_values:
              values: ['eligible', 'insufficient_hours', 'insufficient_tenure', 'inactive_eoy', 'backward_compatibility_simple_rule']
      - name: eligible_for_core
        description: Eligibility flag for employer core contributions
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: current_tenure
        description: "Epic E058 Phase 1: Employee tenure in years for eligibility calculation"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 60
      - name: eligibility_method
        description: "Epic E058 Phase 1: Method used for eligibility determination"
        data_tests:
          - not_null
          - accepted_values:
              values: ['backward_compatibility', 'configured_rules', 'prorated_hours_with_tenure']
      - name: match_apply_eligibility
        description: "Epic E058 Phase 1: Configuration flag indicating whether eligibility rules are applied"
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: match_tenure_requirement
        description: "Epic E058 Phase 1: Minimum tenure requirement in years for match eligibility"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10
      - name: match_hours_requirement
        description: "Epic E058 Phase 1: Minimum hours requirement for match eligibility"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 2500
      - name: match_requires_active_eoy
        description: "Epic E058 Phase 1: Configuration flag requiring active employment at end of year"
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: match_allow_new_hires
        description: "Epic E058 Phase 1: Configuration flag allowing new hires to be eligible"
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: match_allow_terminated_new_hires
        description: "Epic E058 Phase 1: Configuration flag allowing terminated new hires to be eligible"
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: match_allow_experienced_terminations
        description: "Epic E058 Phase 1: Configuration flag allowing experienced terminated employees to be eligible"
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
    data_tests:
      - unique:
          column_name: "employee_id || '_' || simulation_year"
      - dbt_utils.expression_is_true:
          expression: "employment_status = 'active' OR (employment_status != 'active' AND NOT eligible_for_contributions)"
          config:
            severity: error
      - dbt_utils.expression_is_true:
          expression: "annual_hours_worked >= 1000 OR NOT eligible_for_contributions"
          config:
            severity: error
      # Epic E058 Phase 4: Business logic validation tests
      # Temporarily disabled due to YAML parsing issue
      # - dbt_utils.expression_is_true:
      #     name: "e058_match_eligibility_reason_consistency"
      #     expression: >
      #       -- In backward compatibility mode, reason is always 'backward_compatibility_simple_rule'
      #       (match_eligibility_reason = 'backward_compatibility_simple_rule') OR
      #       -- In configured mode, 'eligible' means eligible_for_match=true, others mean false
      #       (match_eligibility_reason = 'eligible' AND eligible_for_match = true) OR
      #       (match_eligibility_reason IN ('insufficient_hours', 'insufficient_tenure', 'inactive_eoy') AND eligible_for_match = false)
      #     config:
      #       severity: error
      #       error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_backward_compatibility_logic"
          expression: >
            (match_apply_eligibility = false AND match_eligibility_reason = 'backward_compatibility_simple_rule') OR
            (match_apply_eligibility = true AND match_eligibility_reason != 'backward_compatibility_simple_rule')
          config:
            severity: error
            error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_tenure_requirement_consistency"
          expression: >
            (match_eligibility_reason = 'insufficient_tenure' AND current_tenure < match_tenure_requirement) OR
            (match_eligibility_reason != 'insufficient_tenure')
          config:
            severity: error
            error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_hours_requirement_consistency"
          expression: >
            (match_eligibility_reason = 'insufficient_hours' AND annual_hours_worked < match_hours_requirement) OR
            (match_eligibility_reason != 'insufficient_hours')
          config:
            severity: error
            error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_active_eoy_requirement_consistency"
          expression: >
            (match_eligibility_reason = 'inactive_eoy' AND match_requires_active_eoy = true AND employment_status != 'active') OR
            (match_eligibility_reason != 'inactive_eoy')
          config:
            severity: error
            error_if: ">= 1"

  - name: int_employer_core_contributions
    description: >
      MVP employer core (non-elective) contribution calculation model.
      Implements simple 2% flat rate for eligible employees based on
      compensation and eligibility determination.
    config:
      tags: ["employer_contributions", "core_contributions", "mvp"]
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
          - relationships:
              to: ref('int_employee_compensation_by_year')
              field: employee_id
      - name: simulation_year
        description: Simulation year for contribution calculation
        data_tests:
          - not_null
          - accepted_values:
              values: [2025, 2026, 2027, 2028, 2029]
      - name: eligible_compensation
        description: Compensation used for contribution calculation
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 20000000
      - name: employer_core_amount
        description: Calculated employer core contribution amount
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 400000
      - name: core_contribution_rate
        description: Applied contribution rate (0.02 for eligible, 0 for ineligible)
        data_tests:
          - not_null
          - accepted_values:
              values: [0.00, 0.02]
      - name: eligible_for_core
        description: Core contribution eligibility flag
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
    data_tests:
      - unique:
          column_name: "employee_id || '_' || simulation_year"
      - dbt_utils.expression_is_true:
          expression: "eligible_for_core = true OR (eligible_for_core = false AND employer_core_amount = 0)"
          config:
            severity: error
      - dbt_utils.expression_is_true:
          expression: "eligible_compensation > 0 OR employer_core_amount = 0"
          config:
            severity: error
      - dbt_utils.expression_is_true:
          expression: "ABS(employer_core_amount - (eligible_compensation * core_contribution_rate)) < 0.01"
          config:
            severity: error

  - name: int_deferral_rate_state_accumulator
    description: >
      Temporal state accumulator for employee deferral rates across simulation years.
      Eliminates circular dependency between int_employee_contributions and fct_yearly_events
      by providing deterministic deferral rate state tracking using the Epic E023 proven pattern.
      CRITICAL: Missing temporal accumulation pattern - requires validation framework.
    config:
      tags: ["state_accumulator", "critical", "e036_fix", "validation_required"]
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
          # Temporarily disabled - failing due to data inconsistency
          # - relationships:
          #     to: ref('int_employee_compensation_by_year')
          #     field: employee_id
      - name: simulation_year
        description: Simulation year for state accumulation
        data_tests:
          - not_null
          - accepted_values:
              values: [2025, 2026, 2027, 2028, 2029]
      - name: current_deferral_rate
        description: Current effective deferral rate for the employee
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1.0
      - name: escalations_received
        description: Total count of escalations received to date
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10
      - name: has_escalations
        description: Flag indicating if employee has received any escalations
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: is_enrolled_flag
        description: Current enrollment status in DC plan
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: data_quality_flag
        description: Data quality validation status
        data_tests:
          - not_null
          - accepted_values:
              values: ['VALID', 'INVALID_EMPLOYEE_ID', 'INVALID_RATE', 'INVALID_ESCALATION_COUNT']
    data_tests:
      # Temporarily disabled - failing due to duplicate records
      # - unique:
      #     column_name: "employee_id || '_' || simulation_year"
      - dbt_utils.expression_is_true:
          expression: "escalations_received >= 0"
          config:
            severity: error
      # Temporarily disabled - failing due to data inconsistency
      # - dbt_utils.expression_is_true:
      #     expression: "current_deferral_rate >= original_deferral_rate OR original_deferral_rate IS NULL"
      #     config:
      #       severity: warn
      - dbt_utils.expression_is_true:
          expression: "(has_escalations = true AND escalations_received > 0) OR (has_escalations = false AND escalations_received = 0)"
          config:
            severity: error
      - dbt_utils.expression_is_true:
          expression: "is_enrolled_flag = true OR (is_enrolled_flag = false AND escalations_received = 0)"
          config:
            severity: error
      # Cross-year continuity validation - fixed invalid SQL expression
      - dbt_utils.accepted_range:
          column_name: current_deferral_rate
          min_value: 0
          max_value: 1
          config:
            severity: error

  - name: validate_deferral_rate_state_continuity
    description: >
      Comprehensive validation model for deferral rate state continuity across years.
      Implements Epic E036 enterprise-grade data quality validation patterns for
      financial audit compliance and regulatory requirements.
    config:
      tags: ["validation", "data_quality", "e036", "audit_compliance"]
    columns:
      - name: validation_category
        description: Category of validation performed
        data_tests:
          - not_null
          - accepted_values:
              values: ['STATE_TRANSITION', 'ORPHANED_STATE', 'LIFECYCLE_INTEGRATION', 'ESCALATION_CONTINUITY']
      - name: employee_id
        description: Employee being validated
        data_tests:
          - not_null
      - name: simulation_year
        description: Year being validated
        data_tests:
          - not_null
      - name: transition_validation_result
        description: Result of validation check
        data_tests:
          - not_null
      - name: data_quality_flag
        description: Pass/Fail classification
        data_tests:
          - not_null
          - accepted_values:
              values: ['PASS', 'FAIL']
      - name: severity_level
        description: Audit priority level
        data_tests:
          - not_null
          - accepted_values:
              values: ['LOW', 'MEDIUM', 'HIGH']
    data_tests:
      - dbt_utils.expression_is_true:
          expression: "COUNT(*) FILTER (WHERE data_quality_flag = 'FAIL' AND severity_level = 'HIGH') = 0"
          config:
            severity: error
      - dbt_utils.expression_is_true:
          expression: "COUNT(*) FILTER (WHERE data_quality_flag = 'FAIL' AND severity_level IN ('HIGH', 'MEDIUM')) <= COUNT(*) * 0.05"
          config:
            severity: warn

  - name: validate_deferral_rate_orphaned_states
    description: >
      Specialized orphaned state detection for financial data audit compliance.
      Ensures all deferral rate state changes have complete audit trails and
      data lineage validation for regulatory requirements.
    config:
      tags: ["validation", "orphaned_state", "e036", "financial_audit"]
    columns:
      - name: orphaned_state_type
        description: Type of orphaned state detected
        data_tests:
          - not_null
      - name: employee_id
        description: Employee with orphaned state
        data_tests:
          - not_null
      - name: severity_level
        description: Financial impact severity
        data_tests:
          - not_null
          - accepted_values:
              values: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']
      - name: estimated_financial_impact
        description: Estimated financial impact in dollars
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: data_quality_flag
        description: Quality status classification
        data_tests:
          - not_null
          - accepted_values:
              values: ['PASS', 'WARNING', 'FAIL', 'REVIEW']
    data_tests:
      - dbt_utils.expression_is_true:
          expression: "COUNT(*) FILTER (WHERE severity_level = 'CRITICAL') = 0"
          config:
            severity: error
      - dbt_utils.expression_is_true:
          expression: "SUM(estimated_financial_impact) FILTER (WHERE data_quality_flag = 'FAIL') < 100000"
          config:
            severity: warn
  - name: int_employee_match_calculations
    description: >
      Employer match calculation model supporting configurable formulas including
      simple percentage match, tiered match, and safe harbor formulas.
      Enhanced with Epic E058 Phase 2: Match Calculation Integration for eligibility filtering.
      Integrates with employee contributions and eligibility determination to calculate match amounts.
    config:
      tags: ["match_engine", "critical", "core_calculation", "e058"]
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
          - unique:
              name: "unique_employee_per_match_year"
      - name: simulation_year
        description: Simulation year for match calculations
        data_tests:
          - not_null
      - name: employer_match_amount
        description: Calculated employer match amount after caps and eligibility filtering
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 50000
      - name: deferral_rate
        description: Employee deferral rate used for match calculation
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1.0
      - name: match_cap_applied
        description: Whether the match cap was applied (before eligibility filtering)
        data_tests:
          - not_null
      - name: formula_type
        description: Type of match formula applied
        data_tests:
          - not_null
          - accepted_values:
              values: ["simple", "tiered", "none"]
      - name: effective_match_rate
        description: Actual match rate after caps and eligibility
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1.5
      - name: is_eligible_for_match
        description: "Epic E058 Phase 2: Match eligibility determination flag"
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: match_eligibility_reason
        description: "Epic E058 Phase 2: Reason code for match eligibility determination"
        data_tests:
          - not_null
          - accepted_values:
              values: ["backward_compatibility_simple_rule", "insufficient_hours", "insufficient_tenure", "inactive_eoy", "eligible"]
      - name: match_status
        description: "Epic E058 Phase 2: Match calculation status tracking"
        data_tests:
          - not_null
          - accepted_values:
              values: ["ineligible", "no_deferrals", "calculated"]
      - name: capped_match_amount
        description: "Epic E058 Phase 2: Match amount after formula caps (before eligibility filtering)"
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 50000
      - name: eligibility_config_applied
        description: "Epic E058 Phase 2: Whether eligibility configuration was applied (vs backward compatibility)"
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
    data_tests:
      - unique:
          column_name: "employee_id || '_' || simulation_year"
      # Epic E058 Phase 4: Business logic validation tests for match calculations
      - dbt_utils.expression_is_true:
          name: "e058_ineligible_employees_zero_match"
          expression: >
            (SELECT COUNT(*) FROM int_employee_match_calculations
             WHERE is_eligible_for_match = false AND employer_match_amount > 0) = 0
          config:
            severity: error
            error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_eligible_with_deferrals_have_match_calculation"
          expression: >
            (SELECT COUNT(*) FROM int_employee_match_calculations
             WHERE is_eligible_for_match = true AND annual_deferrals > 0 AND match_status = 'ineligible') = 0
          config:
            severity: error
            error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_match_status_consistency_with_eligibility"
          expression: >
            (SELECT COUNT(*) FROM int_employee_match_calculations
             WHERE (match_status = 'ineligible' AND is_eligible_for_match = true) OR
                   (match_status != 'ineligible' AND is_eligible_for_match = false)) = 0
          config:
            severity: error
            error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_match_eligibility_reason_alignment"
          expression: >
            (SELECT COUNT(*) FROM int_employee_match_calculations
             WHERE match_eligibility_reason = 'eligible' AND is_eligible_for_match = false) = 0
          config:
            severity: error
            error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_capped_match_amount_consistency"
          expression: >
            (SELECT COUNT(*) FROM int_employee_match_calculations
             WHERE capped_match_amount < 0 OR
                   (is_eligible_for_match = true AND capped_match_amount < employer_match_amount)) = 0
          config:
            severity: error
            error_if: ">= 1"
      - dbt_utils.expression_is_true:
          name: "e058_no_deferrals_status_consistency"
          expression: >
            (SELECT COUNT(*) FROM int_employee_match_calculations
             WHERE match_status = 'no_deferrals' AND annual_deferrals > 0) = 0
          config:
            severity: error
            error_if: ">= 1"

  - name: int_employee_contributions
    description: >
      Employee contribution calculation model using sophisticated period-based methodology.
      Calculates time-weighted contributions with deferral rate changes, IRS limit enforcement,
      and comprehensive data quality validation.
    config:
      tags: ["contribution", "critical", "core_calculation"]
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
          - unique:
              name: "unique_employee_per_contribution_year"
      - name: simulation_year
        description: Simulation year for these contributions
        data_tests:
          - not_null
      - name: prorated_annual_compensation
        description: Time-weighted annual compensation used for contribution calculations
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 500000
      - name: annual_contribution_amount
        description: IRS-limited contributions after applying 402(g) limits
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 31000  # Max catch-up limit for 2025
      - name: amount_capped_by_irs_limit
        description: Amount of contributions exceeding IRS limits that were capped
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 50000
      - name: effective_annual_deferral_rate
        description: Time-weighted effective deferral rate for the year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1.0
      - name: contribution_periods_count
        description: Number of contribution periods calculated for this employee

  - name: int_deferral_rate_state_accumulator_v2
    description: >
      Enhanced temporal state accumulator (v2) for employee deferral rates across years.
      Replaces legacy int_deferral_escalation_state_accumulator and is the canonical source for contributions.
    config:
      tags: ["state_accumulator", "critical", "e036", "v2"]
    data_tests:
      # Uniqueness per employee/year
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - employee_id
            - simulation_year
          config:
            severity: error
            error_if: ">= 1"
      # Temporal continuity - non-decreasing escalation count
      - dbt_utils.expression_is_true:
          expression: >
            (SELECT COUNT(*) FROM (
              SELECT
                employee_id,
                simulation_year,
                escalations_received,
                LAG(escalations_received) OVER (PARTITION BY employee_id ORDER BY simulation_year) as prev_escalations
              FROM int_deferral_rate_state_accumulator_v2
            ) t
            WHERE escalations_received < COALESCE(prev_escalations, 0)) = 0
          config:
            severity: error
            error_if: ">= 1"
      # Deferral rate progression - generally non-decreasing, allow minor negative due to opt-outs (warn only)
      - dbt_utils.expression_is_true:
          expression: >
            (SELECT COUNT(*) FROM (
              SELECT
                employee_id,
                simulation_year,
                current_deferral_rate,
                LAG(current_deferral_rate) OVER (PARTITION BY employee_id ORDER BY simulation_year) as prev_rate
              FROM int_deferral_rate_state_accumulator_v2
            ) t
            WHERE current_deferral_rate < COALESCE(prev_rate, 0) - 0.001) = 0
          config:
            severity: warn
            error_if: ">= 1"
      # No escalations recorded for terminated employees in the same year
      - dbt_utils.expression_is_true:
          expression: >
            (SELECT COUNT(*) FROM int_deferral_rate_state_accumulator_v2 acc
             LEFT JOIN int_employee_compensation_by_year comp
             ON acc.employee_id = comp.employee_id AND acc.simulation_year = comp.simulation_year
             WHERE comp.employment_status = 'terminated'
             AND acc.escalation_events_this_year > 0) = 0
          config:
            severity: error
            error_if: ">= 1"
      # Sanity: no rates above 50%
      - dbt_utils.expression_is_true:
          expression: >
            (SELECT COUNT(*) FROM int_deferral_rate_state_accumulator_v2
             WHERE current_deferral_rate > 0.5) = 0
          config:
            severity: error
            error_if: ">= 1"
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
          - unique:
              name: "unique_employee_per_escalation_year_enhanced"
      - name: simulation_year
        description: Simulation year for state accumulation
        data_tests:
          - not_null
          - accepted_values:
              values: [2025, 2026, 2027, 2028, 2029]
              config:
                severity: error
      - name: current_deferral_rate
        description: Current effective deferral rate after escalations
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 0.5
              config:
                severity: error
      - name: escalations_received
        description: Cumulative escalations received
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10
              config:
                severity: error
      - name: total_escalation_amount
        description: Cumulative deferral rate increase from all escalations
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 0.5
              config:
                severity: error
      - name: escalation_events_this_year
        description: Count of escalation events in current simulation year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 3
              config:
                severity: error
      - name: had_escalation_this_year
        description: Boolean flag indicating if employee received escalation in current year
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
              config:
                severity: error
      - name: has_escalations
        description: Boolean flag indicating if employee has ever received escalations
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
              config:
                severity: error
      - name: original_deferral_rate
        description: Employee's original baseline deferral rate
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 0.5
              config:
                severity: error
      - name: escalation_rate_change_pct
        description: Percentage change from original rate due to escalations
        data_tests:
          - dbt_utils.accepted_range:
              min_value: -0.1
              max_value: 10.0
              config:
                severity: warn
      - name: years_since_first_escalation
        description: Years since first escalation (NULL if no escalations)
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10
              config:
                severity: warn
      - name: days_since_last_escalation
        description: Days since last escalation (NULL if no escalations)
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 3650
              config:
                severity: warn
      - name: scenario_id
        description: Scenario identifier for multi-scenario planning
        data_tests:
          - not_null
          - accepted_values:
              values: ['default', 'scenario_1', 'scenario_2']
              config:
                severity: warn
      - name: data_quality_flag
        description: Enhanced data quality validation flag with comprehensive checks
        data_tests:
          - not_null
          - accepted_values:
              values: ["VALID", "INVALID_EMPLOYEE_ID", "INVALID_SIMULATION_YEAR", "INVALID_DEFERRAL_RATE", "INVALID_DEFERRAL_RATE_RANGE", "INVALID_ESCALATION_COUNT"]
              config:
                severity: error
      - name: created_at
        description: Timestamp when record was created for audit trail
        data_tests:
          - not_null
  - name: int_cold_start_detection
    description: >
      Cold start detection logic with table existence check.
      Determines if this is a cold start or continuation of existing simulation.
      Uses table existence check to safely handle empty databases.
    config:
      tags: ["foundation", "critical"]
    columns:
      - name: is_cold_start
        description: Boolean flag indicating if this is a cold start scenario
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: last_completed_year
        description: The last completed simulation year (0 if cold start)
        data_tests:
          - not_null

  - name: int_simulation_run_log
    description: >
      Simulation run log for tracking completed years.
      Only inserts when a simulation year completes successfully.
    config:
      tags: ["monitoring", "incremental"]
    columns:
      - name: simulation_year
        description: The completed simulation year
        data_tests:
          - unique
          - not_null
      - name: completion_timestamp
        description: When the simulation year completed
        data_tests:
          - not_null
      - name: run_status
        description: Status of the simulation run
        data_tests:
          - not_null
          - accepted_values:
              values: ['COMPLETED', 'FAILED']
      - name: total_employees_processed
        description: Total number of employees processed in this year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0

  - name: int_workforce_needs
    description: >
      Centralized workforce planning calculations providing single source of truth
      for hiring targets, termination expectations, and growth goals.
      Includes financial impact analysis and workforce balance validation.
    config:
      tags: ["workforce_planning", "core_calculations"]
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - simulation_year
            - scenario_id
    columns:
      - name: workforce_needs_id
        description: Unique identifier for this workforce needs calculation
        data_tests:
          - unique
          - not_null
      - name: scenario_id
        description: Scenario identifier for multi-scenario planning
        data_tests:
          - not_null
      - name: simulation_year
        description: Year for which workforce needs are calculated
        data_tests:
          - not_null
      - name: starting_workforce_count
        description: Total active workforce at start of year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: target_growth_rate
        description: Target workforce growth rate (e.g., 0.03 for 3%)
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: -0.5
              max_value: 0.5
      - name: expected_experienced_terminations
        description: Expected number of experienced employee terminations
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: expected_new_hire_terminations
        description: Expected number of new hire terminations
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: total_hires_needed
        description: Total number of hires needed to achieve growth target
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: balance_status
        description: Workforce balance validation status
        data_tests:
          - not_null
          - accepted_values:
              values: ['BALANCED', 'MINOR_VARIANCE', 'SIGNIFICANT_VARIANCE']
      - name: growth_variance
        description: Variance between calculated and target growth
        data_tests:
          - not_null

  - name: int_workforce_needs_by_level
    description: >
      Detailed workforce needs by job level with comprehensive cost modeling.
      Provides granular visibility into hiring, termination, and financial impact by level.
    config:
      tags: ["workforce_planning", "cost_modeling", "level_detail"]
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - simulation_year
            - scenario_id
            - level_id
    columns:
      - name: workforce_needs_id
        description: Reference to parent workforce needs calculation
        data_tests:
          - not_null
          - relationships:
              to: ref('int_workforce_needs')
              field: workforce_needs_id
      - name: level_id
        description: Job level identifier
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_config_job_levels')
              field: level_id
      - name: current_headcount
        description: Current headcount for this level
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: hires_needed
        description: Number of hires needed for this level
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: expected_terminations
        description: Expected terminations for this level
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: net_headcount_change
        description: Net change in headcount for this level
        data_tests:
          - not_null
      - name: total_budget_impact
        description: Total budget impact including all costs
        data_tests:
          - not_null

  - name: int_workforce_snapshot_optimized
    description: >
      Optimized workforce snapshot with performance enhancements for large datasets.
      Provides comprehensive employee state with all financial calculations.
    config:
      contract:
        enforced: true
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_type: varchar
        constraints:
          - type: not_null
      - name: employee_ssn
        description: Employee social security number
        data_type: varchar
      - name: employee_birth_date
        description: Employee birth date
        data_type: date
      - name: employee_hire_date
        description: Employee hire date
        data_type: date
      - name: current_compensation
        description: Current annual compensation
        data_type: double
      - name: prorated_annual_compensation
        description: Prorated compensation for partial year
        data_type: double
      - name: full_year_equivalent_compensation
        description: Full year equivalent compensation
        data_type: double
      - name: current_age
        description: Employee current age
        data_type: int32
      - name: current_tenure
        description: Employee current tenure in years
        data_type: double
      - name: level_id
        description: Employee job level
        data_type: int32
      - name: age_band
        description: Age band classification
        data_type: varchar
      - name: tenure_band
        description: Tenure band classification
        data_type: varchar
      - name: employment_status
        description: Employment status (active/terminated)
        data_type: varchar
      - name: termination_date
        description: Termination date if applicable
        data_type: timestamp
      - name: termination_reason
        description: Reason for termination
        data_type: varchar
      - name: detailed_status_code
        description: Detailed status code
        data_type: varchar
      - name: simulation_year
        description: Simulation year
        data_type: int32
      - name: employee_eligibility_date
        description: Employee eligibility date
        data_type: date
      - name: waiting_period_days
        description: Waiting period in days
        data_type: int32
      - name: current_eligibility_status
        description: Current eligibility status
        data_type: varchar
      - name: employee_enrollment_date
        description: Employee enrollment date
        data_type: date
      - name: snapshot_created_at
        description: Timestamp when snapshot was created
        data_type: timestamp

  - name: int_partitioned_workforce_data
    description: >
      Optimized partitioned workforce data with proper indexing and data types.
      Serves as a performance-optimized base for SCD processing with hash-based change detection.
    config:
      tags: ["performance", "scd", "optimization"]
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
          - unique
      - name: simulation_year
        description: Simulation year for the data
        data_tests:
          - not_null
      - name: current_compensation
        description: Current employee compensation
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: record_hash
        description: Hash of key fields for efficient change detection
        data_tests:
          - not_null

  - name: int_workforce_changes
    description: >
      Hash-based change detection for efficient SCD processing.
      Only processes employees with actual changes since last snapshot.
    config:
      tags: ["performance", "scd", "change_detection"]
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
      - name: change_type
        description: Type of change detected
        data_tests:
          - not_null
          - accepted_values:
              values: ['NEW_EMPLOYEE', 'CHANGED', 'UNCHANGED']
      - name: record_hash
        description: Current record hash for change detection
        data_tests:
          - not_null

  - name: int_year_snapshot_preparation
    description: >
      Year snapshot preparation enhancement with validation hooks.
      Prepares workforce data for the current simulation year with validation.
    config:
      tags: ["foundation", "critical"]
    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - unique
          - not_null
      - name: simulation_year
        description: The simulation year this snapshot represents
        data_tests:
          - not_null
      - name: employment_status
        description: Employment status (active for snapshot preparation)
        data_tests:
          - not_null
          - accepted_values:
              values: ['active']
      - name: is_cold_start
        description: Boolean flag indicating if this is a cold start scenario
        data_tests:
          - not_null
      - name: baseline_active_count
        description: Number of active employees in baseline
        data_tests:
          - not_null
      - name: baseline_total_count
        description: Total number of employees in baseline
        data_tests:
          - not_null

  - name: int_baseline_workforce
    description: >
      Baseline workforce for simulation start, driven by simulation parameters.
      This model provides the initial state of the workforce for multi-year simulations.

      Key features:
      - Calculates age and tenure based on simulation_effective_date
      - Assigns level_id based on compensation bands
      - Creates age and tenure bands for analysis
      - Only includes active employees (no termination date)
    config:
      tags: ["foundation", "critical"]

    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - unique
          - not_null

      - name: employee_ssn
        description: Employee social security number (masked/encrypted in production)
        data_tests:
          - not_null

      - name: employee_birth_date
        description: Employee birth date
        data_tests:
          - not_null

      - name: employee_hire_date
        description: Employee hire date
        data_tests:
          - not_null

      - name: current_compensation
        description: Employee current gross compensation
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              inclusive: false
          # **NEW BASELINE COMPENSATION VALIDATION TESTS**
          # Critical bound: Baseline compensation should never exceed $1M (baseline should be reasonable)
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1000000
              config:
                severity: error
              name: "baseline_compensation_critical_upper_bound"
          # Warning bound: Flag baseline compensation over $500K for review
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 500000
              config:
                severity: warn
              name: "baseline_compensation_warning_upper_bound"
          # Lower bound: Baseline should have reasonable minimum compensation
          - dbt_utils.accepted_range:
              min_value: 30000
              max_value: 10000000
              config:
                where: "employment_status = 'active'"
              name: "baseline_compensation_reasonable_lower_bound"

      - name: current_age
        description: Employee age as of simulation_effective_date
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 16
              max_value: 100

      - name: current_tenure
        description: Employee tenure in years as of simulation_effective_date
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 60

      - name: level_id
        description: Job level ID based on compensation bands
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_config_job_levels')
              field: level_id

      - name: age_band
        description: Age band for analysis (< 25, 25-34, 35-44, 45-54, 55-64, 65+)
        data_tests:
          - not_null
          - accepted_values:
              values: ['< 25', '25-34', '35-44', '45-54', '55-64', '65+']

      - name: tenure_band
        description: Tenure band for analysis (< 2, 2-4, 5-9, 10-19, 20+)
        data_tests:
          - not_null
          - accepted_values:
              values: ['< 2', '2-4', '5-9', '10-19', '20+']

      - name: employment_status
        description: Employment status (always 'active' for baseline)
        data_tests:
          - not_null
          - accepted_values:
              values: ['active']

      - name: termination_date
        description: Termination date (NULL for baseline workforce)

      - name: termination_reason
        description: Termination reason (NULL for baseline workforce)

      - name: simulation_year
        description: The simulation year this baseline represents
        data_tests:
          - not_null

      - name: snapshot_created_at
        description: Timestamp when this snapshot was created
        data_tests:
          - not_null

      - name: is_from_census
        description: Boolean flag indicating if this employee originated from census data
        data_tests:
          - not_null

      - name: is_cold_start
        description: Boolean flag indicating if this is a cold start scenario
        data_tests:
          - not_null

      - name: last_completed_year
        description: The last completed simulation year before this baseline
        data_tests:
          - not_null

      - name: employee_eligibility_date
        description: Date when employee becomes eligible for DC plan participation (from census)
        data_tests:
          - not_null

      - name: waiting_period_days
        description: Number of days employee must wait after hire to become eligible (from census)
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 365

      - name: current_eligibility_status
        description: Current eligibility status based on census data (eligible/pending)
        data_tests:
          - not_null
          - accepted_values:
              values: ['eligible', 'pending']

      - name: employee_enrollment_date
        description: Date when employee enrolled in DC plan (from census)

  - name: int_workforce_previous_year
    description: >
      Enhanced previous year workforce model with fallback handling.
      Gracefully handles missing prior year data without errors.
    config:
      tags: ["foundation", "critical"]
    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - unique
          - not_null
      - name: employment_status
        description: Employment status (active/terminated)
        data_tests:
          - not_null
      - name: simulation_year
        description: Simulation year this workforce represents
        data_tests:
          - not_null
      - name: is_from_census
        description: Boolean flag indicating if this employee originated from census data
        data_tests:
          - not_null
      - name: is_cold_start
        description: Boolean flag indicating if this is a cold start scenario
        data_tests:
          - not_null
      - name: active_employees
        description: Total number of active employees in this workforce
        data_tests:
          - not_null
      - name: total_employees
        description: Total number of employees in this workforce
        data_tests:
          - not_null

  - name: int_termination_events
    description: >
      Hazard-based termination events for workforce simulation.
      Uses demographic-aware probability models to select employees for termination.

      Key features:
      - Hazard-based selection using termination probability by age/tenure/level
      - Deterministic randomization with employee_id hash for reproducibility
      - Demographically-aware modeling (higher turnover for new hires)
      - Consistent with promotion event selection pattern
    config:
      tags: ["event_sourcing"]

    # data_tests will be validated at the column level

    columns:
      - name: employee_id
        description: Unique identifier for terminated employee
        data_tests:
          - unique
          - not_null
          # Temporarily disabled - failing due to data inconsistency
          # - relationships:
          #     to: ref('int_workforce_previous_year')
          #     field: employee_id

      - name: event_type
        description: Type of event (always 'termination')
        data_tests:
          - not_null
          - accepted_values:
              values: ['termination']

      - name: simulation_year
        description: Year when termination occurs
        data_tests:
          - not_null

      - name: effective_date
        description: Specific date when termination is effective
        data_tests:
          - not_null

      - name: termination_reason
        description: Reason for termination
        data_tests:
          - not_null
          - accepted_values:
              values: ['hazard_termination', 'gap_filling_termination']

      - name: termination_rate
        description: Probability rate used for this employee's termination
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1
              inclusive: true

      - name: random_value
        description: Random value used for probability comparison
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1
              inclusive: true

      - name: age_band
        description: Age band of terminated employee
        data_tests:
          - not_null
          - accepted_values:
              values: ['< 25', '25-34', '35-44', '45-54', '55-64', '65+']

      - name: tenure_band
        description: Tenure band of terminated employee
        data_tests:
          - not_null
          - accepted_values:
              values: ['< 2', '2-4', '5-9', '10-19', '20+']

      - name: level_id
        description: Job level of terminated employee
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_config_job_levels')
              field: level_id

      - name: termination_type
        description: Type of termination processing
        data_tests:
          - not_null
          - accepted_values:
              values: ['hazard_termination', 'gap_filling']

  - name: int_hiring_events
    description: >
      New employee hiring events generated to replace departures and achieve target growth.
      Uses modulo-based date distribution for even hiring throughout the year.

      Key features:
      - Even distribution of hire dates across all 365 days of the year
      - Deterministic behavior preserved (same sequence_num = same date)
      - No clustering at December 31st
      - Realistic hiring patterns for workforce simulation
    config:
      tags: ["event_sourcing", "critical"]

    columns:
      - name: employee_id
        description: Unique identifier for new hire
        data_tests:
          - unique
          - not_null

      - name: employee_ssn
        description: Generated SSN for new hire
        data_tests:
          - unique
          - not_null

      - name: event_type
        description: Type of event (always 'hire')
        data_tests:
          - not_null
          - accepted_values:
              values: ['hire']

      - name: simulation_year
        description: Year when hire occurs
        data_tests:
          - not_null

      - name: effective_date
        description: Specific date when hire is effective
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "cast('{{ var('simulation_year') }}-01-01' as date)"
              max_value: "cast('{{ var('simulation_year') }}-12-31' as date)"

      - name: employee_age
        description: Age of new hire
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 18
              max_value: 70

      - name: birth_date
        description: Birth date of new hire
        data_tests:
          - not_null

      - name: level_id
        description: Job level assigned to new hire
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_config_job_levels')
              field: level_id

      - name: compensation_amount
        description: Starting compensation for new hire
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 30000
              max_value: 500000

      - name: hire_source
        description: Source of hire (always 'external_hire')
        data_tests:
          - not_null
          - accepted_values:
              values: ['external_hire']

      - name: created_at
        description: Timestamp when record was created
        data_tests:
          - not_null

    # Custom data quality tests to prevent date clustering regression
    data_tests:
      - dbt_utils.expression_is_true:
          expression: "(select round(count(case when extract(month from effective_date) = 12 then 1 end) * 100.0 / count(*), 2) from int_hiring_events) <= 15.0"
          config:
            severity: error
            error_if: ">= 1"

      - dbt_utils.expression_is_true:
          expression: "(select count(distinct effective_date) from int_hiring_events) >= 300"
          config:
            severity: error
            error_if: ">= 1"

  - name: int_effective_parameters
    description: >
      Parameter resolution model that determines effective parameters per scenario, year, level, and event type.
      Provides dynamic parameter lookup with scenario-based overrides and fallback to defaults.

      Key features:
      - Scenario-based parameter resolution with fallback hierarchy
      - Support for parameter locking to prevent changes
      - Audit trail of parameter sources (scenario, default, hardcoded)
      - Optimized for real-time parameter lookup during simulation
    config:
      tags: ["critical", "foundation"]

    columns:
      - name: parameter_key
        description: Unique key for parameter combination
        data_tests:
          - unique
          - not_null

      - name: scenario_id
        description: Scenario identifier for this parameter set
        data_tests:
          - not_null

      - name: fiscal_year
        description: Fiscal year for which this parameter applies
        data_tests:
          - not_null

      - name: job_level
        description: Job level (1-5) for which this parameter applies
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 5

      - name: event_type
        description: Workforce event type for this parameter
        data_tests:
          - not_null
          - accepted_values:
              values: ['RAISE', 'PROMOTION', 'TERMINATION', 'HIRE', 'DEFERRAL_ESCALATION']

      - name: parameter_name
        description: Name of the parameter
        data_tests:
          - not_null

      - name: parameter_value
        description: Resolved parameter value
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100  # Allow thresholds like age 25, tenure 2, etc.

      - name: is_locked
        description: Whether this parameter is locked from changes
        data_tests:
          - not_null

      - name: parameter_source
        description: Source of the parameter value (scenario, default, hardcoded)
        data_tests:
          - not_null
          - accepted_values:
              values: ['scenario', 'default', 'hardcoded']

      - name: resolved_at
        description: Timestamp when parameter was resolved
        data_tests:
          - not_null

  - name: int_merit_events
    description: >
      Merit-based compensation increases applied to eligible employees.
      Uses dynamic parameter resolution for merit rates by job level and year.
    config:
      tags: ["event_sourcing", "critical"]
    columns:
      - name: employee_id
        description: Unique identifier for employee receiving merit increase
        data_tests:
          - not_null
      - name: event_type
        description: Type of event (always 'RAISE')
        data_tests:
          - not_null
          # Temporarily disabled due to case sensitivity issues
          # - accepted_values:
          #     values: ['RAISE']
      - name: simulation_year
        description: Year when merit increase occurs
        data_tests:
          - not_null
      - name: effective_date
        description: Date when merit increase becomes effective
        data_tests:
          - not_null
      - name: compensation_amount
        description: New compensation amount after merit increase
        data_tests:
          - not_null

  - name: int_promotion_events
    description: >
      Promotion events for employees advancing to higher job levels.
      Uses hazard-based probability models with demographic factors.
    config:
      tags: ["event_sourcing", "critical"]
    columns:
      - name: employee_id
        description: Unique identifier for promoted employee
        data_tests:
          - not_null
      - name: event_type
        description: Type of event (always 'promotion')
        data_tests:
          - not_null
          - accepted_values:
              values: ['promotion']
      - name: simulation_year
        description: Year when promotion occurs
        data_tests:
          - not_null
      - name: effective_date
        description: Date when promotion becomes effective
        data_tests:
          - not_null
      - name: to_level
        description: New job level after promotion
        data_tests:
          - not_null
      - name: new_salary
        description: New compensation amount after promotion
        data_tests:
          - not_null

  - name: int_new_hire_termination_events
    description: >
      Termination events for employees hired in the same simulation year.
      Applies higher turnover rates to new hires for realistic modeling.
    config:
      tags: ["event_sourcing"]
    columns:
      - name: employee_id
        description: Unique identifier for terminated new hire
        data_tests:
          - not_null
      - name: event_type
        description: Type of event (always 'termination')
        data_tests:
          - not_null
          - accepted_values:
              values: ['termination']
      - name: simulation_year
        description: Year when termination occurs
        data_tests:
          - not_null
      - name: effective_date
        description: Date when termination becomes effective
        data_tests:
          - not_null

  - name: int_workforce_active_for_events
    description: >
      Dependency-free model that calculates active employees for event generation.

      **Purpose:**
      Provides active employee data for event generation without circular dependencies.
      Replaces int_active_employees_by_year for all event models.

      **Approach:**
      Calculates the current active workforce by:
      1. Starting with baseline workforce from int_baseline_workforce
      2. Applying all historical events (hires, terminations, promotions, raises) up to simulation_year-1
      3. Determining who is active at the start of simulation_year

      **Circular Dependency Resolution:**
      This model only reads from:
      - int_baseline_workforce (independent)
      - fct_yearly_events (but only for years < simulation_year)
      This prevents circular dependencies with fact tables.

      **Data Integrity:**
      Ensures terminated employees don't receive events in subsequent years.
    config:
      tags: ["foundation", "critical", "event_generation"]
    columns:
      - name: simulation_year
        description: Current simulation year
        data_tests:
          - not_null
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - not_null
      - name: employee_ssn
        description: Employee social security number
        data_tests:
          - not_null
      - name: hire_date
        description: Employee hire date
        data_tests:
          - not_null
      - name: employee_gross_compensation
        description: Current gross compensation
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              inclusive: false
      - name: current_age
        description: Employee age in the simulation year
        data_tests:
          - not_null
      - name: current_tenure
        description: Employee tenure in the simulation year
        data_tests:
          - not_null
      - name: job_level
        description: Current job level
        data_tests:
          - not_null
      - name: age_band
        description: Age band for hazard calculations
        data_tests:
          - not_null
      - name: tenure_band
        description: Tenure band for hazard calculations
        data_tests:
          - not_null
      - name: valid_age
        description: Data quality flag for age validation
        data_tests:
          - not_null
      - name: valid_tenure
        description: Data quality flag for tenure validation
        data_tests:
          - not_null
      - name: valid_compensation
        description: Data quality flag for compensation validation
        data_tests:
          - not_null

  - name: int_active_employees_prev_year_snapshot
    description: >
      Primary helper model for circular dependency resolution.
      Provides active employee data from the previous year's completed workforce snapshot.

      This model creates a temporal dependency (year N depends on year N-1) instead of
      a circular dependency within the same year. It queries fct_workforce_snapshot
      for the previous simulation year and returns only active employees with all
      required contract fields.

      **Circular Dependency Resolution:**
      Eliminates the circular dependency chain by providing clean employee records
      from completed previous year data, ensuring no same-year circular references.
    config:
      tags: ["foundation", "critical", "circular_dependency_resolution"]
    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - unique
          - not_null
      - name: employee_ssn
        description: Employee social security number
        data_tests:
          - not_null
      - name: employee_birth_date
        description: Employee birth date
        data_tests:
          - not_null
      - name: employee_hire_date
        description: Employee hire date
        data_tests:
          - not_null
      - name: employee_gross_compensation
        description: Employee gross compensation
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              inclusive: false
      - name: current_age
        description: Employee age in the current simulation year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 16
              max_value: 100
      - name: current_tenure
        description: Employee tenure in years
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 60
      - name: level_id
        description: Job level ID
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_config_job_levels')
              field: level_id
      - name: employment_status
        description: Employment status (always 'active' for this model)
        data_tests:
          - not_null
          - accepted_values:
              values: ['active']
      - name: termination_date
        description: Termination date (NULL for active employees)
      - name: age_band
        description: Age band for analysis
        data_tests:
          - not_null
          - accepted_values:
              values: ['Under 25', '25-34', '35-44', '45-54', '55-64', '65+']
      - name: tenure_band
        description: Tenure band for analysis
        data_tests:
          - not_null
          - accepted_values:
              values: ['Less than 1 year', '1-2 years', '3-4 years', '5-9 years', '10-19 years', '20+ years']
      - name: simulation_year
        description: Current simulation year
        data_tests:
          - not_null
      - name: data_source
        description: Source of data (always 'previous_year_snapshot')
        data_tests:
          - not_null
          - accepted_values:
              values: ['previous_year_snapshot']
      - name: data_quality_valid
        description: Data quality validation flag
        data_tests:
          - not_null
          - accepted_values:
              values: [true]

  - name: int_active_employees_by_year
    description: >
      Secondary helper model providing unified interface for active employees across all years.

      This model serves as a clean abstraction layer that provides a single interface
      for accessing active employees regardless of the simulation year:
      - For year 1 (start_year): Select from int_baseline_workforce
      - For subsequent years: Select from int_active_employees_prev_year_snapshot

      **Purpose:**
      Provides a unified interface that tests expect to exist, ensuring consistent
      column schema across both data sources while maintaining temporal dependencies.
    config:
      tags: ["foundation", "critical", "unified_interface"]
    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - unique
          - not_null
      - name: employee_ssn
        description: Employee social security number
        data_tests:
          - not_null
      - name: employee_birth_date
        description: Employee birth date
        data_tests:
          - not_null
      - name: employee_hire_date
        description: Employee hire date
        data_tests:
          - not_null
      - name: employee_gross_compensation
        description: Employee gross compensation
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              inclusive: false
      - name: current_age
        description: Employee age in the current simulation year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 16
              max_value: 100
      - name: current_tenure
        description: Employee tenure in years
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 60
      - name: level_id
        description: Job level ID
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_config_job_levels')
              field: level_id
      - name: employment_status
        description: Employment status (always 'active' for this model)
        data_tests:
          - not_null
          - accepted_values:
              values: ['active']
      - name: termination_date
        description: Termination date (NULL for active employees)
      - name: age_band
        description: Age band for analysis
        data_tests:
          - not_null
          - accepted_values:
              values: ['Under 25', '25-34', '35-44', '45-54', '55-64', '65+']
      - name: tenure_band
        description: Tenure band for analysis
        data_tests:
          - not_null
          - accepted_values:
              values: ['Less than 1 year', '1-2 years', '3-4 years', '5-9 years', '10-19 years', '20+ years']
      - name: simulation_year
        description: Current simulation year
        data_tests:
          - not_null
      - name: data_source
        description: Source of data (baseline or previous_year_snapshot)
        data_tests:
          - not_null
          - accepted_values:
              values: ['baseline', 'previous_year_snapshot']
      - name: data_quality_valid
        description: Data quality validation flag
        data_tests:
          - not_null
          - accepted_values:
              values: [true]
      - name: dependency_resolution_method
        description: Method used for dependency resolution
        data_tests:
          - not_null
          - accepted_values:
              values: ['baseline', 'helper_model', 'error_handling']

  - name: int_eligibility_determination
    description: >
      DC Plan eligibility determination for all active employees across simulation years (Epic E022: Story S022-01) - SCALABLE VERSION.

      This model determines employee eligibility for DC plan participation based on days of service
      since hire date. Implements the most common eligibility pattern: waiting period after hire.

      **Business Logic:**
      - Employees become eligible after configurable waiting period (days since hire)
      - Only active employees are evaluated for eligibility
      - Eligibility determined as of January 1st of each simulation year
      - Supports immediate eligibility (0 days) and various waiting periods

      **Configuration:**
      - eligibility_waiting_days: dbt variable (default: 365 days)
      - simulation_start_year: dbt variable (default: 2025)
      - simulation_end_year: dbt variable (default: 2029)

      **Scalability:**
      - Uses dynamic macro to generate eligibility for any year range without hardcoding
      - Can handle 1 year to 100+ years of simulation without code changes
      - No more hardcoded UNION ALL statements for specific years

      **Performance:**
      - SQL-based calculation for 100K+ employees in <30 seconds
      - Materialized as table for optimal query performance
      - Dynamic year generation maintains same performance as static approach
    config:
      tags: ["eligibility", "dc_plan", "epic_e022"]
    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - not_null
      - name: employee_ssn
        description: Employee social security number
        data_tests:
          - not_null
      - name: employee_hire_date
        description: Original employee hire date
        data_tests:
          - not_null
      - name: employment_status
        description: Current employment status (always 'active' for this model)
        data_tests:
          - not_null
          - accepted_values:
              values: ['active']
      - name: simulation_year
        description: Simulation year for eligibility determination
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 2025
              max_value: 2029
      - name: days_since_hire
        description: Number of days from hire date to start of simulation year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: is_eligible
        description: Boolean flag indicating eligibility for plan participation
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: eligibility_reason
        description: Reason for eligibility status
        data_tests:
          - not_null
          - accepted_values:
              values: ['eligible_service_met', 'pending_service_requirement']
      - name: waiting_period_days
        description: Configured waiting period in days
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1095  # Max 3 years
      - name: eligibility_evaluation_date
        description: Date eligibility was evaluated (January 1st of simulation year)
        data_tests:
          - not_null

  - name: int_workforce_pre_enrollment
    description: >
      Pre-Enrollment Workforce Model (Circular Dependency Resolution)

      This helper model provides workforce state data WITHOUT enrollment events,
      breaking the circular dependency chain that was preventing E023 enrollment
      engine from functioning.

      **Purpose:**
      - Serves as clean workforce data source for eligibility determination
      - Excludes enrollment events to prevent circular dependencies
      - Maintains all other workforce event processing
      - Enables enrollment processing in separate phase
    config:
      tags: ["foundation", "critical", "helper", "circular_dependency_resolution"]
    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - not_null
      - name: employee_ssn
        description: Employee social security number
        data_tests:
          - not_null
      - name: employee_birth_date
        description: Employee birth date
        data_tests:
          - not_null
      - name: employee_hire_date
        description: Employee hire date
        data_tests:
          - not_null
      - name: current_compensation
        description: Current employee compensation
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              inclusive: false
      - name: current_age
        description: Employee age in the simulation year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 16
              max_value: 100
      - name: current_tenure
        description: Employee tenure in years
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 60
      - name: level_id
        description: Job level ID
        data_tests:
          - not_null
      - name: employment_status
        description: Employment status (always 'active' for this model)
        data_tests:
          - not_null
          - accepted_values:
              values: ['active']
      - name: simulation_year
        description: Current simulation year
        data_tests:
          - not_null

  - name: int_enrollment_events
    description: >
      Enrollment Events Model (Epic E023: Auto-Enrollment Orchestration Integration)

      Transforms enrollment decisions from the enrollment decision matrix into events compatible
      with the fct_yearly_events pipeline. This model bridges the enrollment orchestration system
      with the existing event sourcing architecture.

      **Event Types Generated:**
      - 'enrollment': Initial enrollment events (proactive, auto, or voluntary)
      - 'enrollment_change': Opt-out events and enrollment modifications

      **Key Features:**
      - 45-day configurable auto-enrollment window orchestration
      - Proactive enrollment timing (before auto-enrollment deadline)
      - Demographic-based enrollment probabilities and opt-out rates
      - Complete audit trail with event sequencing and validation
      - Integration with existing E022 eligibility determination

      **Performance:**
      - Processes enrollment decisions for current simulation year
      - Generates both enrollment and opt-out events in single pass
      - Maintains compatibility with existing event model structure
    config:
      tags: ["enrollment", "dc_plan", "epic_e023", "event_sourcing"]
    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - not_null
      - name: employee_ssn
        description: Employee social security number
        data_tests:
          - not_null
      - name: event_type
        description: Type of enrollment event
        data_tests:
          - not_null
          - accepted_values:
              values: ['enrollment', 'enrollment_change']
      - name: simulation_year
        description: Simulation year when enrollment event occurs
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 2025
              max_value: 2035
      - name: effective_date
        description: Date when enrollment event becomes effective
        data_tests:
          - not_null
      - name: event_details
        description: Human-readable description of the enrollment event
        data_tests:
          - not_null
      - name: compensation_amount
        description: Employee compensation at time of enrollment
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              inclusive: false
      - name: employee_age
        description: Employee age at time of enrollment
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 18
              max_value: 70
      - name: employee_tenure
        description: Employee tenure at time of enrollment
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 50
      - name: level_id
        description: Employee job level at time of enrollment
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 10
      - name: event_probability
        description: Demographic-based probability for this enrollment event
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1
              inclusive: true
      - name: event_category
        description: Category of enrollment event for analysis
        data_tests:
          - not_null
          - accepted_values:
              values: ['proactive_enrollment', 'auto_enrollment', 'voluntary_enrollment', 'enrollment_opt_out']
      - name: data_quality_flag
        description: Data quality validation flag
        data_tests:
          - not_null
          - accepted_values:
              values: ['VALID', 'INVALID_EMPLOYEE_ID', 'INVALID_SIMULATION_YEAR', 'INVALID_EFFECTIVE_DATE', 'INVALID_EVENT_TYPE', 'INVALID_COMPENSATION']
      - name: created_at
        description: Timestamp when event record was created
        data_tests:
          - not_null
      - name: event_source
        description: Source system that generated this event
        data_tests:
          - not_null
          - accepted_values:
              values: ['E023_enrollment_engine']

  - name: int_plan_eligibility_determination
    description: >
      Plan eligibility determination - determines who can participate in the 401(k) plan.
      This is separate from employer contribution eligibility and uses rule-based calculation
      to avoid circular dependencies. MVP implementation for immediate plan enrollment.
    config:
      tags: ["eligibility", "enrollment", "E023"]
    columns:
      - name: employee_id
        description: Unique employee identifier
        data_tests:
          - not_null
          - unique
      - name: is_plan_eligible
        description: Whether employee is eligible to participate in the plan
        data_tests:
          - not_null
      - name: plan_eligibility_date
        description: Date when employee becomes eligible for plan participation
        data_tests:
          - not_null
      - name: eligibility_status
        description: Current eligibility status
        data_tests:
          - not_null
          - accepted_values:
              values: ['eligible', 'not_eligible_age', 'not_eligible_tenure', 'not_eligible_other']

  - name: int_auto_enrollment_window_determination
    description: >
      Auto-enrollment window determination with hire date cutoff support.
      Tests the hire date cutoff functionality to ensure employees hired before
      the cutoff date are properly excluded from auto-enrollment scope.
    config:
      tags: ["enrollment", "dc_plan", "epic_e023", "hire_date_cutoff"]
    data_tests:
      - dbt_utils.expression_is_true:
          expression: >
            (select count(*) from int_auto_enrollment_window_determination
             where employee_hire_date < '{{ var("auto_enrollment_hire_date_cutoff", "2020-01-01") }}'::date
             and eligible_for_auto_enrollment = true) = 0
          config:
            severity: warn
            enabled: "{{ var('auto_enrollment_hire_date_cutoff', null) != null }}"
            store_failures: true
      - dbt_utils.expression_is_true:
          expression: >
            (select count(*) from int_auto_enrollment_window_determination
             where in_auto_enrollment_scope = true) > 0
          config:
            severity: error
            store_failures: true

  - name: int_enrollment_decision_matrix
    description: >
      Enrollment decision matrix with hire date cutoff consistency.
      Validates that hire date cutoff logic is applied consistently
      across all enrollment decision paths.
    config:
      tags: ["enrollment", "dc_plan", "epic_e023", "hire_date_cutoff"]
    data_tests:
      - dbt_utils.expression_is_true:
          expression: >
            (select count(*)
             from {{ ref('int_enrollment_decision_matrix') }} dm
             join {{ ref('int_workforce_pre_enrollment') }} w
               on dm.employee_id = w.employee_id
              and dm.simulation_year = w.simulation_year
             where w.employee_hire_date < '{{ var("auto_enrollment_hire_date_cutoff", "2020-01-01") }}'::date
               and dm.enrollment_source = 'auto') = 0
          config:
            severity: warn
            enabled: "{{ var('auto_enrollment_hire_date_cutoff', null) != null }}"
            store_failures: true

  - name: int_enrollment_state_accumulator
    description: >
      Temporal State Accumulator for Enrollment Tracking (Phase 1 Fix)

      This model implements a temporal state accumulator pattern to track enrollment
      state across simulation years without circular dependencies. It builds enrollment
      state year-by-year using only fct_yearly_events and its own previous year data.

      **Key Features:**
      - Incremental materialization with unique_key=['employee_id', 'simulation_year']
      - Handles base case (first simulation year) with baseline workforce
      - Accumulates enrollment history across simulation years
      - Tracks enrollment_date, enrollment_status, and enrollment changes
      - No circular dependencies (only uses fct_yearly_events + own previous data)

      **Phase 1 Fix:**
      Replaces int_historical_enrollment_tracker to solve the issue where 321 employees
      have enrollment events but no enrollment dates in workforce snapshots.

      **Architecture:**
      - Base case: Uses int_baseline_workforce for first simulation year
      - Subsequent years: Uses previous year state from this same model + current events
      - Event-sourced: All enrollment state changes tracked through fct_yearly_events
    config:
      tags: ["enrollment", "temporal_accumulator", "phase1_fix", "critical"]
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - employee_id
            - simulation_year
    columns:
      - name: employee_id
        description: Unique identifier for each employee
        data_tests:
          - not_null
      - name: simulation_year
        description: Simulation year for this enrollment state record
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 2025
              max_value: 2035
      - name: enrollment_date
        description: Date when employee first enrolled (NULL if never enrolled)
      - name: enrollment_status
        description: Current enrollment status (true if enrolled, false if not or opted out)
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: years_since_first_enrollment
        description: Number of years since first enrollment (NULL if never enrolled)
        data_tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 50
      - name: enrollment_source
        description: Source of enrollment (baseline, event_YYYY, or none)
        data_tests:
          - not_null
      - name: enrollment_events_this_year
        description: Count of enrollment events in current simulation year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10
      - name: enrollment_change_events_this_year
        description: Count of enrollment change events in current simulation year
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10
      - name: effective_enrollment_date
        description: Effective enrollment date (enrollment_date if enrolled, NULL otherwise)
      - name: is_enrolled
        description: Boolean flag indicating current enrollment status
        data_tests:
          - not_null
          - accepted_values:
              values: [true, false]
      - name: created_at
        description: Timestamp when this record was created
        data_tests:
          - not_null
      - name: scenario_id
        description: Scenario identifier for multi-scenario planning
        data_tests:
          - not_null
      - name: data_quality_flag
        description: Data quality validation flag
        data_tests:
          - not_null
          - accepted_values:
              values: ['VALID', 'INVALID_EMPLOYEE_ID', 'INVALID_SIMULATION_YEAR', 'INVALID_ENROLLMENT_STATUS']

  # TEMPORARILY DISABLED: int_deferral_rate_escalation_events
  # - name: int_deferral_rate_escalation_events
  #   description: >
  #     Generate annual deferral rate escalation events for eligible enrolled employees.
  #     Implements Epic E035 requirements with configurable increment amounts (default 1%),
  #     maximum rate caps (default 10%), and demographic-based eligibility rules.
  #     Integrates with existing parameter system for job-level configuration.
  #   config:
  #     tags: ["escalation", "deferral", "events", "epic_e035"]
