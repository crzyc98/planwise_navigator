{{ config(
    materialized='table',
    indexes=[
        {'columns': ['simulation_year', 'employee_id'], 'type': 'btree'},
        {'columns': ['simulation_year'], 'type': 'btree'},
        {'columns': ['employee_id'], 'type': 'btree'},
        {'columns': ['effective_date'], 'type': 'btree'}
    ]
) }}

{% set simulation_year = var('simulation_year') %}
{% set start_year = var('start_year', 2025) %}

/*
  Generate deferral rate escalation events for eligible employees

  Epic E035: Automatic Annual Deferral Rate Escalation

  This model generates annual deferral rate increase events following the
  user requirements:
  - Default January 1st effective date
  - 1% increment amount (configurable by job level)
  - 10% maximum rate cap (configurable by job level)
  - Toggle inclusion based on hire date

  Business Logic:
  - Only enrolled employees are eligible for escalation
  - Must meet tenure and age thresholds from parameters
  - Respects maximum escalation count limits
  - Uses existing parameter system for job-level configuration
  - Integrates with temporal state accumulator for multi-year tracking
*/

-- Check if deferral escalation is enabled globally
WITH escalation_config_check AS (
    SELECT
        1 as dummy,
        -- TEMPORARILY DISABLED: Disable escalation to fix circular dependencies
        -- TODO: Fix circular dependency and re-enable Epic E035 escalation
        false as escalation_enabled
),

-- Get current year active workforce with enrollment status from baseline/previous year
active_enrolled_workforce AS (
    SELECT
        w.employee_id,
        w.employee_ssn,
        w.employee_hire_date,
        w.employee_gross_compensation,
        w.current_age,
        w.current_tenure,
        w.level_id,
        w.employment_status,
        -- Get enrollment status directly from baseline data (break circular dependency)
        CASE
            WHEN w.employee_deferral_rate > 0 THEN true  -- Has deferral rate means enrolled
            WHEN baseline.employee_enrollment_date IS NOT NULL THEN true  -- Enrolled in baseline
            ELSE false
        END as enrollment_status,
        -- Get enrollment date from baseline or approximate from hire date
        COALESCE(baseline.employee_enrollment_date, w.employee_hire_date) as enrollment_date,
        -- Calculate years since enrollment (approximate)
        CASE
            WHEN baseline.employee_enrollment_date IS NOT NULL
            THEN GREATEST(1, DATE_DIFF('year', baseline.employee_enrollment_date, DATE('{{ simulation_year }}-12-31')))
            WHEN w.employee_deferral_rate > 0
            THEN GREATEST(1, DATE_DIFF('year', w.employee_hire_date, DATE('{{ simulation_year }}-12-31')))
            ELSE 0
        END as years_since_first_enrollment
    FROM {{ ref('int_employee_compensation_by_year') }} w
    LEFT JOIN {{ ref('int_baseline_workforce') }} baseline
        ON w.employee_id = baseline.employee_id
    WHERE w.simulation_year = {{ simulation_year }}
        AND w.employment_status = 'active'
        AND w.employee_id IS NOT NULL
),

-- Get previous year's escalation state to prevent duplicates and track history
previous_escalation_state AS (
{% if simulation_year == start_year %}
    -- Base case: No previous escalations for first simulation year
    SELECT
        'dummy' as employee_id,
        0 as total_escalations,
        NULL as last_escalation_date,
        0.00 as current_deferral_rate
    WHERE 1=0  -- Empty result set
{% else %}
    -- TEMPORARILY DISABLED: Get previous escalation state (breaks circular dependency)
    -- SELECT
    --     employee_id,
    --     total_deferral_escalations as total_escalations,
    --     last_escalation_date,
    --     current_deferral_rate
    -- FROM {{ ref('fct_workforce_snapshot') }}
    -- WHERE simulation_year = {{ simulation_year - 1 }}
    --     AND employee_id IS NOT NULL
    --     AND employment_status = 'active'

    -- Return empty result set to avoid compilation issues
    SELECT
        'dummy' as employee_id,
        0 as total_escalations,
        NULL as last_escalation_date,
        0.00 as current_deferral_rate
    WHERE 1=0  -- Empty result set
{% endif %}
),

-- Workforce with current deferral rates and escalation history
workforce_with_escalation_history AS (
    SELECT
        w.*,
        -- Current deferral rate (from census or previous escalations)
        COALESCE(p.current_deferral_rate,
                 COALESCE(w.employee_deferral_rate, 0.00)) as current_deferral_rate,
        -- Previous escalation tracking
        COALESCE(p.total_escalations, 0) as total_previous_escalations,
        p.last_escalation_date,
        -- Calculate days since last escalation (if any)
        CASE
            WHEN p.last_escalation_date IS NOT NULL
            THEN DATE_DIFF('day', p.last_escalation_date, DATE('{{ simulation_year }}-01-01'))
            ELSE 9999  -- No previous escalations
        END as days_since_last_escalation
    FROM active_enrolled_workforce w
    LEFT JOIN previous_escalation_state p ON w.employee_id = p.employee_id
),

-- Generate demographic bands for parameter lookup
workforce_with_bands AS (
    SELECT
        *,
        -- Age bands for parameter resolution
        CASE
            WHEN current_age < 25 THEN '< 25'
            WHEN current_age < 35 THEN '25-34'
            WHEN current_age < 45 THEN '35-44'
            WHEN current_age < 55 THEN '45-54'
            WHEN current_age < 65 THEN '55-64'
            ELSE '65+'
        END AS age_band,
        -- Tenure bands for parameter resolution
        CASE
            WHEN current_tenure < 2 THEN '< 2'
            WHEN current_tenure < 5 THEN '2-4'
            WHEN current_tenure < 10 THEN '5-9'
            WHEN current_tenure < 20 THEN '10-19'
            ELSE '20+'
        END AS tenure_band
    FROM workforce_with_escalation_history
),

-- Apply eligibility rules and parameter resolution
eligible_for_escalation AS (
    SELECT
        w.*,
        -- Resolve parameters using existing macro system
        {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'escalation_rate', simulation_year) }} as escalation_rate,
        {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'max_escalation_rate', simulation_year) }} as max_escalation_rate,
        {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'tenure_threshold', simulation_year) }} as tenure_threshold,
        {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'age_threshold', simulation_year) }} as age_threshold,
        {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'max_escalations', simulation_year) }} as max_escalations,

        -- Calculate new deferral rate
        LEAST(
            {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'max_escalation_rate', simulation_year) }},
            w.current_deferral_rate + {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'escalation_rate', simulation_year) }}
        ) as new_deferral_rate,

        -- Eligibility checks
        CASE WHEN w.enrollment_status = true THEN 1 ELSE 0 END as is_enrolled_check,
        CASE WHEN w.current_tenure >= {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'tenure_threshold', simulation_year) }} THEN 1 ELSE 0 END as meets_tenure_check,
        CASE WHEN w.current_age >= {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'age_threshold', simulation_year) }} THEN 1 ELSE 0 END as meets_age_check,
        CASE WHEN w.total_previous_escalations < {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'max_escalations', simulation_year) }} THEN 1 ELSE 0 END as under_escalation_limit_check,
        CASE WHEN w.current_deferral_rate < {{ get_parameter_value('w.level_id', 'DEFERRAL_ESCALATION', 'max_escalation_rate', simulation_year) }} THEN 1 ELSE 0 END as under_rate_cap_check,
        CASE WHEN w.days_since_last_escalation >= 365 THEN 1 ELSE 0 END as timing_check,
        CASE WHEN w.years_since_first_enrollment >= 1 THEN 1 ELSE 0 END as enrollment_maturity_check

    FROM workforce_with_bands w
    CROSS JOIN escalation_config_check c
    WHERE c.escalation_enabled = true
),

-- Filter to only eligible employees and calculate escalation events
final_escalation_events AS (
    SELECT
        e.*,
        -- Overall eligibility determination
        (e.is_enrolled_check * e.meets_tenure_check * e.meets_age_check *
         e.under_escalation_limit_check * e.under_rate_cap_check *
         e.timing_check * e.enrollment_maturity_check) as is_eligible,

        -- Calculate meaningful increase (prevent tiny escalations)
        CASE
            WHEN (e.new_deferral_rate - e.current_deferral_rate) >= 0.001 THEN 1
            ELSE 0
        END as is_meaningful_increase,

        -- Eligibility details for audit trail
        JSON_OBJECT(
            'enrolled', e.is_enrolled_check,
            'tenure_met', e.meets_tenure_check,
            'age_met', e.meets_age_check,
            'under_escalation_limit', e.under_escalation_limit_check,
            'under_rate_cap', e.under_rate_cap_check,
            'timing_ok', e.timing_check,
            'enrollment_mature', e.enrollment_maturity_check,
            'meaningful_increase', CASE WHEN (e.new_deferral_rate - e.current_deferral_rate) >= 0.001 THEN 1 ELSE 0 END,
            'current_rate', e.current_deferral_rate,
            'new_rate', e.new_deferral_rate,
            'escalation_count', e.total_previous_escalations
        ) as eligibility_details

    FROM eligible_for_escalation e
)

-- TEMPORARILY DISABLED: Return empty result set to break circular dependencies
-- FIXME: Re-enable Epic E035 deferral escalation after fixing architecture
SELECT
    CAST(NULL AS VARCHAR) as employee_id,
    CAST(NULL AS VARCHAR) as employee_ssn,
    CAST(NULL AS VARCHAR) AS event_type,
    CAST(NULL AS INTEGER) AS simulation_year,
    CAST(NULL AS DATE) AS effective_date,

    -- Previous and new deferral rates
    CAST(NULL AS DECIMAL(5,4)) as previous_deferral_rate,
    CAST(NULL AS DECIMAL(5,4)) as new_deferral_rate,
    CAST(NULL AS DECIMAL(5,4)) as escalation_rate,

    -- Employee context
    CAST(NULL AS INTEGER) as current_age,
    CAST(NULL AS DECIMAL(10,2)) as current_tenure,
    CAST(NULL AS INTEGER) as level_id,
    CAST(NULL AS VARCHAR) as age_band,
    CAST(NULL AS VARCHAR) as tenure_band,

    -- Escalation metadata
    CAST(NULL AS INTEGER) as new_escalation_count,
    CAST(NULL AS INTEGER) as max_escalations,
    CAST(NULL AS DECIMAL(5,4)) as max_escalation_rate,

    -- Event details for integration with fct_yearly_events
    CAST(NULL AS VARCHAR) as event_details,

    -- Audit trail
    CAST(NULL AS TIMESTAMP) as created_at,
    CAST(NULL AS VARCHAR) as parameter_scenario_id,
    CAST(NULL AS VARCHAR) as event_source,

    -- Data quality validation
    CAST(NULL AS VARCHAR) as data_quality_flag

WHERE FALSE  -- Always return empty result set
