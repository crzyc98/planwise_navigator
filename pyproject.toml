[project]
name = "planwise-navigator"
version = "0.1.0"
description = "Workforce planning and simulation tool with immutable event sourcing"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]

dependencies = [
    # Core runtime dependencies
    "duckdb==1.0.0",
    "dbt-core==1.8.8",
    "dbt-duckdb==1.8.1",
    "streamlit==1.39.0",
    "pydantic==2.7.4",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    "hypothesis>=6.0.0",

    # Performance optimization dependencies
    "polars>=0.20.0",
    "lz4>=4.3.3",
    "psutil>=5.9.0",
    "networkx>=3.0",
    "matplotlib>=3.8.0",

    # Excel export dependencies
    "openpyxl>=3.1.0",

    # Corporate network and HTTP client dependencies
    "requests>=2.28.0",
    "urllib3>=1.26.0",

    # CLI dependencies for PlanWise Navigator CLI
    "rich>=13.0.0",
    "typer>=0.9.0",
    "inquirer>=3.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==7.4.0",
    "pytest-cov==4.1.0",
    "pytest-mock==3.11.1",
    "pytest-xdist==3.3.1",
    "factory-boy==3.3.0",
    "Faker==19.3.0",

    # Code Quality
    "ruff==0.4.3",
    "black==23.9.1",
    "isort==5.12.0",
    "mypy==1.5.1",
    "pylint==3.0.2",
    "flake8==6.1.0",
    "pre-commit==3.3.3",

    # Docs / Dev tools
    "mkdocs==1.5.2",
    "mkdocs-material==9.3.1",
    "mkdocstrings-python==1.5.0",
    "jupyter==1.0.0",
    "ipython==8.14.0",
    "ipdb==0.13.13",
]

[project.scripts]
planwise = "planwise_cli.main:cli_main"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = [
    "navigator_orchestrator",
    "navigator_orchestrator.pipeline",
    "planwise_cli",
    "planwise_cli.commands",
    "planwise_cli.integration",
    "planwise_cli.ui",
    "planwise_cli.utils",
    "config",
]

[tool.setuptools.package-data]
navigator_orchestrator = ["py.typed"]
config = ["*.yaml", "*.yml"]

[tool.pytest.ini_options]
# Exclude third-party packages and non-test directories
testpaths = ["tests"]
norecursedirs = [
    ".*",
    "dbt",
    "dbt_packages",
    "venv",
    ".venv",
    "*.egg",
    "dist",
    "build",
    "docs",
    "scripts",
    "streamlit_dashboard"
]

# Test discovery patterns
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Console output
console_output_style = "progress"
addopts = [
    "-ra",                    # Show summary of all test outcomes
    "--strict-markers",       # Error on unregistered markers
    "--strict-config",        # Error on config issues
    "--showlocals",          # Show local variables in tracebacks
    "--tb=short",            # Shorter traceback format
    "-p no:warnings",        # Suppress warnings during collection
]

# Test markers
markers = [
    # Execution speed markers
    "fast: Fast unit tests (<1s each)",
    "slow: Slow integration tests (1-10s each)",
    "very_slow: E2E tests (10s+ each)",

    # Test type markers
    "unit: Pure unit tests (no I/O)",
    "integration: Integration tests (database, dbt)",
    "e2e: End-to-end workflow tests",

    # Feature area markers
    "orchestrator: Orchestrator component tests",
    "events: Event schema tests",
    "dbt: dbt integration tests",
    "cli: CLI command tests",
    "threading: Multi-threading tests",
    "config: Configuration validation tests",

    # Quality markers
    "smoke: Critical path smoke tests",
    "regression: Regression test suite",
    "performance: Performance and benchmarking tests",
    "stress: Stress tests for high-load scenarios",

    # Legacy markers
    "edge_case: Edge case and boundary testing",
    "error_handling: Error handling validation tests",
    "database: Tests requiring database access",
    "asyncio: Async tests using asyncio event loop",
]

# Coverage options (when using pytest-cov)
[tool.coverage.run]
source = ["navigator_orchestrator", "planwise_cli", "config"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/dbt/*",
    "*/streamlit_dashboard/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
